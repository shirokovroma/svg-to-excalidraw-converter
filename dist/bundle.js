/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var svg_to_excalidraw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svg-to-excalidraw */ \"./node_modules/svg-to-excalidraw/dist/bundle.js\");\n/* harmony import */ var svg_to_excalidraw__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(svg_to_excalidraw__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst fileSelector = document.getElementById(\"source\");\nconst textContainer = document.getElementById(\"text\");\nfileSelector.addEventListener(\"change\", (event) => {\n  textContainer.innerText = \"Processing...\";\n  const fileList = event.target.files;\n  for (let i = 0; i < fileList.length; i++) {\n    const name = fileList[i].name.replace(\".svg\", \".excalidraw\");\n    const contents = readFile(fileList[i]);\n    downloadFile(name, contents);\n  }\n  // clear the input\n  event.target.value = \"\";\n  textContainer.innerHTML = \"Drag and drop your svg file here <br>or click to select file\";\n});\n\nfunction readFile(file) {\n  if (file.type && file.type !== \"image/svg+xml\") {\n    console.log(\"File is not SVG.\");\n\n    return;\n  }\n\n  const reader = new FileReader();\n\n  reader.readAsText(file);\n  reader.addEventListener(\"load\", (event) => {\n   const { hasErrors, errors, content } = svg_to_excalidraw__WEBPACK_IMPORTED_MODULE_0___default().convert(event.target.result);\n   if (hasErrors) {\n     console.log(errors);\n   }\n   console.log(content);\n   return JSON.stringify(content, null, 2)\n  });\n}\n\nfunction downloadFile(filename, contents){\n  const link = document.createElement('a');\n  link.download = filename;\n  link.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(contents);\n  document.body.appendChild(link);\n  link.click();\n\n  document.body.removeChild(link);\n  return link;\n}\n\n//# sourceURL=webpack://svg-excalidraw/./index.js?");

/***/ }),

/***/ "./node_modules/svg-to-excalidraw/dist/bundle.js":
/*!*******************************************************!*\
  !*** ./node_modules/svg-to-excalidraw/dist/bundle.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("!function(g,I){ true?module.exports=I():0}(self,(function(){return(()=>{var __webpack_modules__={773:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{\"use strict\";eval('// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \"default\": () => (/* binding */ src)\\n});\\n\\n// NAMESPACE OBJECT: ./src/parser.ts\\nvar src_parser_namespaceObject = {};\\n__webpack_require__.r(src_parser_namespaceObject);\\n__webpack_require__.d(src_parser_namespaceObject, {\\n  \"convert\": () => (convert)\\n});\\n\\n;// CONCATENATED MODULE: ./src/elements/ExcalidrawScene.ts\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nvar ExcalidrawScene = /*#__PURE__*/function () {\\n  function ExcalidrawScene() {\\n    var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\\n\\n    _classCallCheck(this, ExcalidrawScene);\\n\\n    _defineProperty(this, \"type\", \"excalidraw\");\\n\\n    _defineProperty(this, \"version\", 2);\\n\\n    _defineProperty(this, \"source\", \"https://excalidraw.com\");\\n\\n    _defineProperty(this, \"elements\", []);\\n\\n    this.elements = elements;\\n  }\\n\\n  _createClass(ExcalidrawScene, [{\\n    key: \"toExJSON\",\\n    value: function toExJSON() {\\n      return _objectSpread(_objectSpread({}, this), {}, {\\n        elements: this.elements.map(function (el) {\\n          return _objectSpread({}, el);\\n        })\\n      });\\n    }\\n  }]);\\n\\n  return ExcalidrawScene;\\n}();\\n\\n/* harmony default export */ const elements_ExcalidrawScene = (ExcalidrawScene);\\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/common.js\\n/**\\r\\n * Common utilities\\r\\n * @module glMatrix\\r\\n */\\n// Configuration Constants\\nvar EPSILON = 0.000001;\\nvar ARRAY_TYPE = typeof Float32Array !== \\'undefined\\' ? Float32Array : Array;\\nvar RANDOM = Math.random;\\n/**\\r\\n * Sets the type of array used when creating new vectors and matrices\\r\\n *\\r\\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\\r\\n */\\n\\nfunction setMatrixArrayType(type) {\\n  ARRAY_TYPE = type;\\n}\\nvar degree = Math.PI / 180;\\n/**\\r\\n * Convert Degree To Radian\\r\\n *\\r\\n * @param {Number} a Angle in Degrees\\r\\n */\\n\\nfunction toRadian(a) {\\n  return a * degree;\\n}\\n/**\\r\\n * Tests whether or not the arguments have approximately the same value, within an absolute\\r\\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\\r\\n * than or equal to 1.0, and a relative tolerance is used for larger values)\\r\\n *\\r\\n * @param {Number} a The first number to test.\\r\\n * @param {Number} b The second number to test.\\r\\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\\r\\n */\\n\\nfunction equals(a, b) {\\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\\n}\\nif (!Math.hypot) Math.hypot = function () {\\n  var y = 0,\\n      i = arguments.length;\\n\\n  while (i--) {\\n    y += arguments[i] * arguments[i];\\n  }\\n\\n  return Math.sqrt(y);\\n};\\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat4.js\\n\\n/**\\r\\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\\r\\n * @module mat4\\r\\n */\\n\\n/**\\r\\n * Creates a new identity mat4\\r\\n *\\r\\n * @returns {mat4} a new 4x4 matrix\\r\\n */\\n\\nfunction create() {\\n  var out = new ARRAY_TYPE(16);\\n\\n  if (ARRAY_TYPE != Float32Array) {\\n    out[1] = 0;\\n    out[2] = 0;\\n    out[3] = 0;\\n    out[4] = 0;\\n    out[6] = 0;\\n    out[7] = 0;\\n    out[8] = 0;\\n    out[9] = 0;\\n    out[11] = 0;\\n    out[12] = 0;\\n    out[13] = 0;\\n    out[14] = 0;\\n  }\\n\\n  out[0] = 1;\\n  out[5] = 1;\\n  out[10] = 1;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Creates a new mat4 initialized with values from an existing matrix\\r\\n *\\r\\n * @param {ReadonlyMat4} a matrix to clone\\r\\n * @returns {mat4} a new 4x4 matrix\\r\\n */\\n\\nfunction clone(a) {\\n  var out = new ARRAY_TYPE(16);\\n  out[0] = a[0];\\n  out[1] = a[1];\\n  out[2] = a[2];\\n  out[3] = a[3];\\n  out[4] = a[4];\\n  out[5] = a[5];\\n  out[6] = a[6];\\n  out[7] = a[7];\\n  out[8] = a[8];\\n  out[9] = a[9];\\n  out[10] = a[10];\\n  out[11] = a[11];\\n  out[12] = a[12];\\n  out[13] = a[13];\\n  out[14] = a[14];\\n  out[15] = a[15];\\n  return out;\\n}\\n/**\\r\\n * Copy the values from one mat4 to another\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the source matrix\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction copy(out, a) {\\n  out[0] = a[0];\\n  out[1] = a[1];\\n  out[2] = a[2];\\n  out[3] = a[3];\\n  out[4] = a[4];\\n  out[5] = a[5];\\n  out[6] = a[6];\\n  out[7] = a[7];\\n  out[8] = a[8];\\n  out[9] = a[9];\\n  out[10] = a[10];\\n  out[11] = a[11];\\n  out[12] = a[12];\\n  out[13] = a[13];\\n  out[14] = a[14];\\n  out[15] = a[15];\\n  return out;\\n}\\n/**\\r\\n * Create a new mat4 with the given values\\r\\n *\\r\\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\\r\\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\\r\\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\\r\\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\\r\\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\\r\\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\\r\\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\\r\\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\\r\\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\\r\\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\\r\\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\\r\\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\\r\\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\\r\\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\\r\\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\\r\\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\\r\\n * @returns {mat4} A new mat4\\r\\n */\\n\\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\\n  var out = new ARRAY_TYPE(16);\\n  out[0] = m00;\\n  out[1] = m01;\\n  out[2] = m02;\\n  out[3] = m03;\\n  out[4] = m10;\\n  out[5] = m11;\\n  out[6] = m12;\\n  out[7] = m13;\\n  out[8] = m20;\\n  out[9] = m21;\\n  out[10] = m22;\\n  out[11] = m23;\\n  out[12] = m30;\\n  out[13] = m31;\\n  out[14] = m32;\\n  out[15] = m33;\\n  return out;\\n}\\n/**\\r\\n * Set the components of a mat4 to the given values\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\\r\\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\\r\\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\\r\\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\\r\\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\\r\\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\\r\\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\\r\\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\\r\\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\\r\\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\\r\\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\\r\\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\\r\\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\\r\\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\\r\\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\\r\\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\\n  out[0] = m00;\\n  out[1] = m01;\\n  out[2] = m02;\\n  out[3] = m03;\\n  out[4] = m10;\\n  out[5] = m11;\\n  out[6] = m12;\\n  out[7] = m13;\\n  out[8] = m20;\\n  out[9] = m21;\\n  out[10] = m22;\\n  out[11] = m23;\\n  out[12] = m30;\\n  out[13] = m31;\\n  out[14] = m32;\\n  out[15] = m33;\\n  return out;\\n}\\n/**\\r\\n * Set a mat4 to the identity matrix\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction identity(out) {\\n  out[0] = 1;\\n  out[1] = 0;\\n  out[2] = 0;\\n  out[3] = 0;\\n  out[4] = 0;\\n  out[5] = 1;\\n  out[6] = 0;\\n  out[7] = 0;\\n  out[8] = 0;\\n  out[9] = 0;\\n  out[10] = 1;\\n  out[11] = 0;\\n  out[12] = 0;\\n  out[13] = 0;\\n  out[14] = 0;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Transpose the values of a mat4\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the source matrix\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction transpose(out, a) {\\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\\n  if (out === a) {\\n    var a01 = a[1],\\n        a02 = a[2],\\n        a03 = a[3];\\n    var a12 = a[6],\\n        a13 = a[7];\\n    var a23 = a[11];\\n    out[1] = a[4];\\n    out[2] = a[8];\\n    out[3] = a[12];\\n    out[4] = a01;\\n    out[6] = a[9];\\n    out[7] = a[13];\\n    out[8] = a02;\\n    out[9] = a12;\\n    out[11] = a[14];\\n    out[12] = a03;\\n    out[13] = a13;\\n    out[14] = a23;\\n  } else {\\n    out[0] = a[0];\\n    out[1] = a[4];\\n    out[2] = a[8];\\n    out[3] = a[12];\\n    out[4] = a[1];\\n    out[5] = a[5];\\n    out[6] = a[9];\\n    out[7] = a[13];\\n    out[8] = a[2];\\n    out[9] = a[6];\\n    out[10] = a[10];\\n    out[11] = a[14];\\n    out[12] = a[3];\\n    out[13] = a[7];\\n    out[14] = a[11];\\n    out[15] = a[15];\\n  }\\n\\n  return out;\\n}\\n/**\\r\\n * Inverts a mat4\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the source matrix\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction invert(out, a) {\\n  var a00 = a[0],\\n      a01 = a[1],\\n      a02 = a[2],\\n      a03 = a[3];\\n  var a10 = a[4],\\n      a11 = a[5],\\n      a12 = a[6],\\n      a13 = a[7];\\n  var a20 = a[8],\\n      a21 = a[9],\\n      a22 = a[10],\\n      a23 = a[11];\\n  var a30 = a[12],\\n      a31 = a[13],\\n      a32 = a[14],\\n      a33 = a[15];\\n  var b00 = a00 * a11 - a01 * a10;\\n  var b01 = a00 * a12 - a02 * a10;\\n  var b02 = a00 * a13 - a03 * a10;\\n  var b03 = a01 * a12 - a02 * a11;\\n  var b04 = a01 * a13 - a03 * a11;\\n  var b05 = a02 * a13 - a03 * a12;\\n  var b06 = a20 * a31 - a21 * a30;\\n  var b07 = a20 * a32 - a22 * a30;\\n  var b08 = a20 * a33 - a23 * a30;\\n  var b09 = a21 * a32 - a22 * a31;\\n  var b10 = a21 * a33 - a23 * a31;\\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\\n\\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n\\n  if (!det) {\\n    return null;\\n  }\\n\\n  det = 1.0 / det;\\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\\n  return out;\\n}\\n/**\\r\\n * Calculates the adjugate of a mat4\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the source matrix\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction adjoint(out, a) {\\n  var a00 = a[0],\\n      a01 = a[1],\\n      a02 = a[2],\\n      a03 = a[3];\\n  var a10 = a[4],\\n      a11 = a[5],\\n      a12 = a[6],\\n      a13 = a[7];\\n  var a20 = a[8],\\n      a21 = a[9],\\n      a22 = a[10],\\n      a23 = a[11];\\n  var a30 = a[12],\\n      a31 = a[13],\\n      a32 = a[14],\\n      a33 = a[15];\\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\\n  return out;\\n}\\n/**\\r\\n * Calculates the determinant of a mat4\\r\\n *\\r\\n * @param {ReadonlyMat4} a the source matrix\\r\\n * @returns {Number} determinant of a\\r\\n */\\n\\nfunction determinant(a) {\\n  var a00 = a[0],\\n      a01 = a[1],\\n      a02 = a[2],\\n      a03 = a[3];\\n  var a10 = a[4],\\n      a11 = a[5],\\n      a12 = a[6],\\n      a13 = a[7];\\n  var a20 = a[8],\\n      a21 = a[9],\\n      a22 = a[10],\\n      a23 = a[11];\\n  var a30 = a[12],\\n      a31 = a[13],\\n      a32 = a[14],\\n      a33 = a[15];\\n  var b00 = a00 * a11 - a01 * a10;\\n  var b01 = a00 * a12 - a02 * a10;\\n  var b02 = a00 * a13 - a03 * a10;\\n  var b03 = a01 * a12 - a02 * a11;\\n  var b04 = a01 * a13 - a03 * a11;\\n  var b05 = a02 * a13 - a03 * a12;\\n  var b06 = a20 * a31 - a21 * a30;\\n  var b07 = a20 * a32 - a22 * a30;\\n  var b08 = a20 * a33 - a23 * a30;\\n  var b09 = a21 * a32 - a22 * a31;\\n  var b10 = a21 * a33 - a23 * a31;\\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\\n\\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n}\\n/**\\r\\n * Multiplies two mat4s\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the first operand\\r\\n * @param {ReadonlyMat4} b the second operand\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction multiply(out, a, b) {\\n  var a00 = a[0],\\n      a01 = a[1],\\n      a02 = a[2],\\n      a03 = a[3];\\n  var a10 = a[4],\\n      a11 = a[5],\\n      a12 = a[6],\\n      a13 = a[7];\\n  var a20 = a[8],\\n      a21 = a[9],\\n      a22 = a[10],\\n      a23 = a[11];\\n  var a30 = a[12],\\n      a31 = a[13],\\n      a32 = a[14],\\n      a33 = a[15]; // Cache only the current line of the second matrix\\n\\n  var b0 = b[0],\\n      b1 = b[1],\\n      b2 = b[2],\\n      b3 = b[3];\\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\\n  b0 = b[4];\\n  b1 = b[5];\\n  b2 = b[6];\\n  b3 = b[7];\\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\\n  b0 = b[8];\\n  b1 = b[9];\\n  b2 = b[10];\\n  b3 = b[11];\\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\\n  b0 = b[12];\\n  b1 = b[13];\\n  b2 = b[14];\\n  b3 = b[15];\\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\\n  return out;\\n}\\n/**\\r\\n * Translate a mat4 by the given vector\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the matrix to translate\\r\\n * @param {ReadonlyVec3} v vector to translate by\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction translate(out, a, v) {\\n  var x = v[0],\\n      y = v[1],\\n      z = v[2];\\n  var a00, a01, a02, a03;\\n  var a10, a11, a12, a13;\\n  var a20, a21, a22, a23;\\n\\n  if (a === out) {\\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\\n  } else {\\n    a00 = a[0];\\n    a01 = a[1];\\n    a02 = a[2];\\n    a03 = a[3];\\n    a10 = a[4];\\n    a11 = a[5];\\n    a12 = a[6];\\n    a13 = a[7];\\n    a20 = a[8];\\n    a21 = a[9];\\n    a22 = a[10];\\n    a23 = a[11];\\n    out[0] = a00;\\n    out[1] = a01;\\n    out[2] = a02;\\n    out[3] = a03;\\n    out[4] = a10;\\n    out[5] = a11;\\n    out[6] = a12;\\n    out[7] = a13;\\n    out[8] = a20;\\n    out[9] = a21;\\n    out[10] = a22;\\n    out[11] = a23;\\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\\n  }\\n\\n  return out;\\n}\\n/**\\r\\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the matrix to scale\\r\\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\\r\\n * @returns {mat4} out\\r\\n **/\\n\\nfunction scale(out, a, v) {\\n  var x = v[0],\\n      y = v[1],\\n      z = v[2];\\n  out[0] = a[0] * x;\\n  out[1] = a[1] * x;\\n  out[2] = a[2] * x;\\n  out[3] = a[3] * x;\\n  out[4] = a[4] * y;\\n  out[5] = a[5] * y;\\n  out[6] = a[6] * y;\\n  out[7] = a[7] * y;\\n  out[8] = a[8] * z;\\n  out[9] = a[9] * z;\\n  out[10] = a[10] * z;\\n  out[11] = a[11] * z;\\n  out[12] = a[12];\\n  out[13] = a[13];\\n  out[14] = a[14];\\n  out[15] = a[15];\\n  return out;\\n}\\n/**\\r\\n * Rotates a mat4 by the given angle around the given axis\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the matrix to rotate\\r\\n * @param {Number} rad the angle to rotate the matrix by\\r\\n * @param {ReadonlyVec3} axis the axis to rotate around\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction rotate(out, a, rad, axis) {\\n  var x = axis[0],\\n      y = axis[1],\\n      z = axis[2];\\n  var len = Math.hypot(x, y, z);\\n  var s, c, t;\\n  var a00, a01, a02, a03;\\n  var a10, a11, a12, a13;\\n  var a20, a21, a22, a23;\\n  var b00, b01, b02;\\n  var b10, b11, b12;\\n  var b20, b21, b22;\\n\\n  if (len < glMatrix.EPSILON) {\\n    return null;\\n  }\\n\\n  len = 1 / len;\\n  x *= len;\\n  y *= len;\\n  z *= len;\\n  s = Math.sin(rad);\\n  c = Math.cos(rad);\\n  t = 1 - c;\\n  a00 = a[0];\\n  a01 = a[1];\\n  a02 = a[2];\\n  a03 = a[3];\\n  a10 = a[4];\\n  a11 = a[5];\\n  a12 = a[6];\\n  a13 = a[7];\\n  a20 = a[8];\\n  a21 = a[9];\\n  a22 = a[10];\\n  a23 = a[11]; // Construct the elements of the rotation matrix\\n\\n  b00 = x * x * t + c;\\n  b01 = y * x * t + z * s;\\n  b02 = z * x * t - y * s;\\n  b10 = x * y * t - z * s;\\n  b11 = y * y * t + c;\\n  b12 = z * y * t + x * s;\\n  b20 = x * z * t + y * s;\\n  b21 = y * z * t - x * s;\\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\\n\\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\\n\\n  if (a !== out) {\\n    // If the source and destination differ, copy the unchanged last row\\n    out[12] = a[12];\\n    out[13] = a[13];\\n    out[14] = a[14];\\n    out[15] = a[15];\\n  }\\n\\n  return out;\\n}\\n/**\\r\\n * Rotates a matrix by the given angle around the X axis\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the matrix to rotate\\r\\n * @param {Number} rad the angle to rotate the matrix by\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction rotateX(out, a, rad) {\\n  var s = Math.sin(rad);\\n  var c = Math.cos(rad);\\n  var a10 = a[4];\\n  var a11 = a[5];\\n  var a12 = a[6];\\n  var a13 = a[7];\\n  var a20 = a[8];\\n  var a21 = a[9];\\n  var a22 = a[10];\\n  var a23 = a[11];\\n\\n  if (a !== out) {\\n    // If the source and destination differ, copy the unchanged rows\\n    out[0] = a[0];\\n    out[1] = a[1];\\n    out[2] = a[2];\\n    out[3] = a[3];\\n    out[12] = a[12];\\n    out[13] = a[13];\\n    out[14] = a[14];\\n    out[15] = a[15];\\n  } // Perform axis-specific matrix multiplication\\n\\n\\n  out[4] = a10 * c + a20 * s;\\n  out[5] = a11 * c + a21 * s;\\n  out[6] = a12 * c + a22 * s;\\n  out[7] = a13 * c + a23 * s;\\n  out[8] = a20 * c - a10 * s;\\n  out[9] = a21 * c - a11 * s;\\n  out[10] = a22 * c - a12 * s;\\n  out[11] = a23 * c - a13 * s;\\n  return out;\\n}\\n/**\\r\\n * Rotates a matrix by the given angle around the Y axis\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the matrix to rotate\\r\\n * @param {Number} rad the angle to rotate the matrix by\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction rotateY(out, a, rad) {\\n  var s = Math.sin(rad);\\n  var c = Math.cos(rad);\\n  var a00 = a[0];\\n  var a01 = a[1];\\n  var a02 = a[2];\\n  var a03 = a[3];\\n  var a20 = a[8];\\n  var a21 = a[9];\\n  var a22 = a[10];\\n  var a23 = a[11];\\n\\n  if (a !== out) {\\n    // If the source and destination differ, copy the unchanged rows\\n    out[4] = a[4];\\n    out[5] = a[5];\\n    out[6] = a[6];\\n    out[7] = a[7];\\n    out[12] = a[12];\\n    out[13] = a[13];\\n    out[14] = a[14];\\n    out[15] = a[15];\\n  } // Perform axis-specific matrix multiplication\\n\\n\\n  out[0] = a00 * c - a20 * s;\\n  out[1] = a01 * c - a21 * s;\\n  out[2] = a02 * c - a22 * s;\\n  out[3] = a03 * c - a23 * s;\\n  out[8] = a00 * s + a20 * c;\\n  out[9] = a01 * s + a21 * c;\\n  out[10] = a02 * s + a22 * c;\\n  out[11] = a03 * s + a23 * c;\\n  return out;\\n}\\n/**\\r\\n * Rotates a matrix by the given angle around the Z axis\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the matrix to rotate\\r\\n * @param {Number} rad the angle to rotate the matrix by\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction rotateZ(out, a, rad) {\\n  var s = Math.sin(rad);\\n  var c = Math.cos(rad);\\n  var a00 = a[0];\\n  var a01 = a[1];\\n  var a02 = a[2];\\n  var a03 = a[3];\\n  var a10 = a[4];\\n  var a11 = a[5];\\n  var a12 = a[6];\\n  var a13 = a[7];\\n\\n  if (a !== out) {\\n    // If the source and destination differ, copy the unchanged last row\\n    out[8] = a[8];\\n    out[9] = a[9];\\n    out[10] = a[10];\\n    out[11] = a[11];\\n    out[12] = a[12];\\n    out[13] = a[13];\\n    out[14] = a[14];\\n    out[15] = a[15];\\n  } // Perform axis-specific matrix multiplication\\n\\n\\n  out[0] = a00 * c + a10 * s;\\n  out[1] = a01 * c + a11 * s;\\n  out[2] = a02 * c + a12 * s;\\n  out[3] = a03 * c + a13 * s;\\n  out[4] = a10 * c - a00 * s;\\n  out[5] = a11 * c - a01 * s;\\n  out[6] = a12 * c - a02 * s;\\n  out[7] = a13 * c - a03 * s;\\n  return out;\\n}\\n/**\\r\\n * Creates a matrix from a vector translation\\r\\n * This is equivalent to (but much faster than):\\r\\n *\\r\\n *     mat4.identity(dest);\\r\\n *     mat4.translate(dest, dest, vec);\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {ReadonlyVec3} v Translation vector\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromTranslation(out, v) {\\n  out[0] = 1;\\n  out[1] = 0;\\n  out[2] = 0;\\n  out[3] = 0;\\n  out[4] = 0;\\n  out[5] = 1;\\n  out[6] = 0;\\n  out[7] = 0;\\n  out[8] = 0;\\n  out[9] = 0;\\n  out[10] = 1;\\n  out[11] = 0;\\n  out[12] = v[0];\\n  out[13] = v[1];\\n  out[14] = v[2];\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Creates a matrix from a vector scaling\\r\\n * This is equivalent to (but much faster than):\\r\\n *\\r\\n *     mat4.identity(dest);\\r\\n *     mat4.scale(dest, dest, vec);\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {ReadonlyVec3} v Scaling vector\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromScaling(out, v) {\\n  out[0] = v[0];\\n  out[1] = 0;\\n  out[2] = 0;\\n  out[3] = 0;\\n  out[4] = 0;\\n  out[5] = v[1];\\n  out[6] = 0;\\n  out[7] = 0;\\n  out[8] = 0;\\n  out[9] = 0;\\n  out[10] = v[2];\\n  out[11] = 0;\\n  out[12] = 0;\\n  out[13] = 0;\\n  out[14] = 0;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Creates a matrix from a given angle around a given axis\\r\\n * This is equivalent to (but much faster than):\\r\\n *\\r\\n *     mat4.identity(dest);\\r\\n *     mat4.rotate(dest, dest, rad, axis);\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {Number} rad the angle to rotate the matrix by\\r\\n * @param {ReadonlyVec3} axis the axis to rotate around\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromRotation(out, rad, axis) {\\n  var x = axis[0],\\n      y = axis[1],\\n      z = axis[2];\\n  var len = Math.hypot(x, y, z);\\n  var s, c, t;\\n\\n  if (len < glMatrix.EPSILON) {\\n    return null;\\n  }\\n\\n  len = 1 / len;\\n  x *= len;\\n  y *= len;\\n  z *= len;\\n  s = Math.sin(rad);\\n  c = Math.cos(rad);\\n  t = 1 - c; // Perform rotation-specific matrix multiplication\\n\\n  out[0] = x * x * t + c;\\n  out[1] = y * x * t + z * s;\\n  out[2] = z * x * t - y * s;\\n  out[3] = 0;\\n  out[4] = x * y * t - z * s;\\n  out[5] = y * y * t + c;\\n  out[6] = z * y * t + x * s;\\n  out[7] = 0;\\n  out[8] = x * z * t + y * s;\\n  out[9] = y * z * t - x * s;\\n  out[10] = z * z * t + c;\\n  out[11] = 0;\\n  out[12] = 0;\\n  out[13] = 0;\\n  out[14] = 0;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Creates a matrix from the given angle around the X axis\\r\\n * This is equivalent to (but much faster than):\\r\\n *\\r\\n *     mat4.identity(dest);\\r\\n *     mat4.rotateX(dest, dest, rad);\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {Number} rad the angle to rotate the matrix by\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromXRotation(out, rad) {\\n  var s = Math.sin(rad);\\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\\n\\n  out[0] = 1;\\n  out[1] = 0;\\n  out[2] = 0;\\n  out[3] = 0;\\n  out[4] = 0;\\n  out[5] = c;\\n  out[6] = s;\\n  out[7] = 0;\\n  out[8] = 0;\\n  out[9] = -s;\\n  out[10] = c;\\n  out[11] = 0;\\n  out[12] = 0;\\n  out[13] = 0;\\n  out[14] = 0;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Creates a matrix from the given angle around the Y axis\\r\\n * This is equivalent to (but much faster than):\\r\\n *\\r\\n *     mat4.identity(dest);\\r\\n *     mat4.rotateY(dest, dest, rad);\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {Number} rad the angle to rotate the matrix by\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromYRotation(out, rad) {\\n  var s = Math.sin(rad);\\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\\n\\n  out[0] = c;\\n  out[1] = 0;\\n  out[2] = -s;\\n  out[3] = 0;\\n  out[4] = 0;\\n  out[5] = 1;\\n  out[6] = 0;\\n  out[7] = 0;\\n  out[8] = s;\\n  out[9] = 0;\\n  out[10] = c;\\n  out[11] = 0;\\n  out[12] = 0;\\n  out[13] = 0;\\n  out[14] = 0;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Creates a matrix from the given angle around the Z axis\\r\\n * This is equivalent to (but much faster than):\\r\\n *\\r\\n *     mat4.identity(dest);\\r\\n *     mat4.rotateZ(dest, dest, rad);\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {Number} rad the angle to rotate the matrix by\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromZRotation(out, rad) {\\n  var s = Math.sin(rad);\\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\\n\\n  out[0] = c;\\n  out[1] = s;\\n  out[2] = 0;\\n  out[3] = 0;\\n  out[4] = -s;\\n  out[5] = c;\\n  out[6] = 0;\\n  out[7] = 0;\\n  out[8] = 0;\\n  out[9] = 0;\\n  out[10] = 1;\\n  out[11] = 0;\\n  out[12] = 0;\\n  out[13] = 0;\\n  out[14] = 0;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Creates a matrix from a quaternion rotation and vector translation\\r\\n * This is equivalent to (but much faster than):\\r\\n *\\r\\n *     mat4.identity(dest);\\r\\n *     mat4.translate(dest, vec);\\r\\n *     let quatMat = mat4.create();\\r\\n *     quat4.toMat4(quat, quatMat);\\r\\n *     mat4.multiply(dest, quatMat);\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {quat4} q Rotation quaternion\\r\\n * @param {ReadonlyVec3} v Translation vector\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromRotationTranslation(out, q, v) {\\n  // Quaternion math\\n  var x = q[0],\\n      y = q[1],\\n      z = q[2],\\n      w = q[3];\\n  var x2 = x + x;\\n  var y2 = y + y;\\n  var z2 = z + z;\\n  var xx = x * x2;\\n  var xy = x * y2;\\n  var xz = x * z2;\\n  var yy = y * y2;\\n  var yz = y * z2;\\n  var zz = z * z2;\\n  var wx = w * x2;\\n  var wy = w * y2;\\n  var wz = w * z2;\\n  out[0] = 1 - (yy + zz);\\n  out[1] = xy + wz;\\n  out[2] = xz - wy;\\n  out[3] = 0;\\n  out[4] = xy - wz;\\n  out[5] = 1 - (xx + zz);\\n  out[6] = yz + wx;\\n  out[7] = 0;\\n  out[8] = xz + wy;\\n  out[9] = yz - wx;\\n  out[10] = 1 - (xx + yy);\\n  out[11] = 0;\\n  out[12] = v[0];\\n  out[13] = v[1];\\n  out[14] = v[2];\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Creates a new mat4 from a dual quat.\\r\\n *\\r\\n * @param {mat4} out Matrix\\r\\n * @param {ReadonlyQuat2} a Dual Quaternion\\r\\n * @returns {mat4} mat4 receiving operation result\\r\\n */\\n\\nfunction fromQuat2(out, a) {\\n  var translation = new glMatrix.ARRAY_TYPE(3);\\n  var bx = -a[0],\\n      by = -a[1],\\n      bz = -a[2],\\n      bw = a[3],\\n      ax = a[4],\\n      ay = a[5],\\n      az = a[6],\\n      aw = a[7];\\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\\n\\n  if (magnitude > 0) {\\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\\n  } else {\\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\\n  }\\n\\n  fromRotationTranslation(out, a, translation);\\n  return out;\\n}\\n/**\\r\\n * Returns the translation vector component of a transformation\\r\\n *  matrix. If a matrix is built with fromRotationTranslation,\\r\\n *  the returned vector will be the same as the translation vector\\r\\n *  originally supplied.\\r\\n * @param  {vec3} out Vector to receive translation component\\r\\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\\r\\n * @return {vec3} out\\r\\n */\\n\\nfunction getTranslation(out, mat) {\\n  out[0] = mat[12];\\n  out[1] = mat[13];\\n  out[2] = mat[14];\\n  return out;\\n}\\n/**\\r\\n * Returns the scaling factor component of a transformation\\r\\n *  matrix. If a matrix is built with fromRotationTranslationScale\\r\\n *  with a normalized Quaternion paramter, the returned vector will be\\r\\n *  the same as the scaling vector\\r\\n *  originally supplied.\\r\\n * @param  {vec3} out Vector to receive scaling factor component\\r\\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\\r\\n * @return {vec3} out\\r\\n */\\n\\nfunction getScaling(out, mat) {\\n  var m11 = mat[0];\\n  var m12 = mat[1];\\n  var m13 = mat[2];\\n  var m21 = mat[4];\\n  var m22 = mat[5];\\n  var m23 = mat[6];\\n  var m31 = mat[8];\\n  var m32 = mat[9];\\n  var m33 = mat[10];\\n  out[0] = Math.hypot(m11, m12, m13);\\n  out[1] = Math.hypot(m21, m22, m23);\\n  out[2] = Math.hypot(m31, m32, m33);\\n  return out;\\n}\\n/**\\r\\n * Returns a quaternion representing the rotational component\\r\\n *  of a transformation matrix. If a matrix is built with\\r\\n *  fromRotationTranslation, the returned quaternion will be the\\r\\n *  same as the quaternion originally supplied.\\r\\n * @param {quat} out Quaternion to receive the rotation component\\r\\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\\r\\n * @return {quat} out\\r\\n */\\n\\nfunction getRotation(out, mat) {\\n  var scaling = new glMatrix.ARRAY_TYPE(3);\\n  getScaling(scaling, mat);\\n  var is1 = 1 / scaling[0];\\n  var is2 = 1 / scaling[1];\\n  var is3 = 1 / scaling[2];\\n  var sm11 = mat[0] * is1;\\n  var sm12 = mat[1] * is2;\\n  var sm13 = mat[2] * is3;\\n  var sm21 = mat[4] * is1;\\n  var sm22 = mat[5] * is2;\\n  var sm23 = mat[6] * is3;\\n  var sm31 = mat[8] * is1;\\n  var sm32 = mat[9] * is2;\\n  var sm33 = mat[10] * is3;\\n  var trace = sm11 + sm22 + sm33;\\n  var S = 0;\\n\\n  if (trace > 0) {\\n    S = Math.sqrt(trace + 1.0) * 2;\\n    out[3] = 0.25 * S;\\n    out[0] = (sm23 - sm32) / S;\\n    out[1] = (sm31 - sm13) / S;\\n    out[2] = (sm12 - sm21) / S;\\n  } else if (sm11 > sm22 && sm11 > sm33) {\\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\\n    out[3] = (sm23 - sm32) / S;\\n    out[0] = 0.25 * S;\\n    out[1] = (sm12 + sm21) / S;\\n    out[2] = (sm31 + sm13) / S;\\n  } else if (sm22 > sm33) {\\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\\n    out[3] = (sm31 - sm13) / S;\\n    out[0] = (sm12 + sm21) / S;\\n    out[1] = 0.25 * S;\\n    out[2] = (sm23 + sm32) / S;\\n  } else {\\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\\n    out[3] = (sm12 - sm21) / S;\\n    out[0] = (sm31 + sm13) / S;\\n    out[1] = (sm23 + sm32) / S;\\n    out[2] = 0.25 * S;\\n  }\\n\\n  return out;\\n}\\n/**\\r\\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\\r\\n * This is equivalent to (but much faster than):\\r\\n *\\r\\n *     mat4.identity(dest);\\r\\n *     mat4.translate(dest, vec);\\r\\n *     let quatMat = mat4.create();\\r\\n *     quat4.toMat4(quat, quatMat);\\r\\n *     mat4.multiply(dest, quatMat);\\r\\n *     mat4.scale(dest, scale)\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {quat4} q Rotation quaternion\\r\\n * @param {ReadonlyVec3} v Translation vector\\r\\n * @param {ReadonlyVec3} s Scaling vector\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromRotationTranslationScale(out, q, v, s) {\\n  // Quaternion math\\n  var x = q[0],\\n      y = q[1],\\n      z = q[2],\\n      w = q[3];\\n  var x2 = x + x;\\n  var y2 = y + y;\\n  var z2 = z + z;\\n  var xx = x * x2;\\n  var xy = x * y2;\\n  var xz = x * z2;\\n  var yy = y * y2;\\n  var yz = y * z2;\\n  var zz = z * z2;\\n  var wx = w * x2;\\n  var wy = w * y2;\\n  var wz = w * z2;\\n  var sx = s[0];\\n  var sy = s[1];\\n  var sz = s[2];\\n  out[0] = (1 - (yy + zz)) * sx;\\n  out[1] = (xy + wz) * sx;\\n  out[2] = (xz - wy) * sx;\\n  out[3] = 0;\\n  out[4] = (xy - wz) * sy;\\n  out[5] = (1 - (xx + zz)) * sy;\\n  out[6] = (yz + wx) * sy;\\n  out[7] = 0;\\n  out[8] = (xz + wy) * sz;\\n  out[9] = (yz - wx) * sz;\\n  out[10] = (1 - (xx + yy)) * sz;\\n  out[11] = 0;\\n  out[12] = v[0];\\n  out[13] = v[1];\\n  out[14] = v[2];\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\\r\\n * This is equivalent to (but much faster than):\\r\\n *\\r\\n *     mat4.identity(dest);\\r\\n *     mat4.translate(dest, vec);\\r\\n *     mat4.translate(dest, origin);\\r\\n *     let quatMat = mat4.create();\\r\\n *     quat4.toMat4(quat, quatMat);\\r\\n *     mat4.multiply(dest, quatMat);\\r\\n *     mat4.scale(dest, scale)\\r\\n *     mat4.translate(dest, negativeOrigin);\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {quat4} q Rotation quaternion\\r\\n * @param {ReadonlyVec3} v Translation vector\\r\\n * @param {ReadonlyVec3} s Scaling vector\\r\\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\\n  // Quaternion math\\n  var x = q[0],\\n      y = q[1],\\n      z = q[2],\\n      w = q[3];\\n  var x2 = x + x;\\n  var y2 = y + y;\\n  var z2 = z + z;\\n  var xx = x * x2;\\n  var xy = x * y2;\\n  var xz = x * z2;\\n  var yy = y * y2;\\n  var yz = y * z2;\\n  var zz = z * z2;\\n  var wx = w * x2;\\n  var wy = w * y2;\\n  var wz = w * z2;\\n  var sx = s[0];\\n  var sy = s[1];\\n  var sz = s[2];\\n  var ox = o[0];\\n  var oy = o[1];\\n  var oz = o[2];\\n  var out0 = (1 - (yy + zz)) * sx;\\n  var out1 = (xy + wz) * sx;\\n  var out2 = (xz - wy) * sx;\\n  var out4 = (xy - wz) * sy;\\n  var out5 = (1 - (xx + zz)) * sy;\\n  var out6 = (yz + wx) * sy;\\n  var out8 = (xz + wy) * sz;\\n  var out9 = (yz - wx) * sz;\\n  var out10 = (1 - (xx + yy)) * sz;\\n  out[0] = out0;\\n  out[1] = out1;\\n  out[2] = out2;\\n  out[3] = 0;\\n  out[4] = out4;\\n  out[5] = out5;\\n  out[6] = out6;\\n  out[7] = 0;\\n  out[8] = out8;\\n  out[9] = out9;\\n  out[10] = out10;\\n  out[11] = 0;\\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Calculates a 4x4 matrix from the given quaternion\\r\\n *\\r\\n * @param {mat4} out mat4 receiving operation result\\r\\n * @param {ReadonlyQuat} q Quaternion to create matrix from\\r\\n *\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction fromQuat(out, q) {\\n  var x = q[0],\\n      y = q[1],\\n      z = q[2],\\n      w = q[3];\\n  var x2 = x + x;\\n  var y2 = y + y;\\n  var z2 = z + z;\\n  var xx = x * x2;\\n  var yx = y * x2;\\n  var yy = y * y2;\\n  var zx = z * x2;\\n  var zy = z * y2;\\n  var zz = z * z2;\\n  var wx = w * x2;\\n  var wy = w * y2;\\n  var wz = w * z2;\\n  out[0] = 1 - yy - zz;\\n  out[1] = yx + wz;\\n  out[2] = zx - wy;\\n  out[3] = 0;\\n  out[4] = yx - wz;\\n  out[5] = 1 - xx - zz;\\n  out[6] = zy + wx;\\n  out[7] = 0;\\n  out[8] = zx + wy;\\n  out[9] = zy - wx;\\n  out[10] = 1 - xx - yy;\\n  out[11] = 0;\\n  out[12] = 0;\\n  out[13] = 0;\\n  out[14] = 0;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Generates a frustum matrix with the given bounds\\r\\n *\\r\\n * @param {mat4} out mat4 frustum matrix will be written into\\r\\n * @param {Number} left Left bound of the frustum\\r\\n * @param {Number} right Right bound of the frustum\\r\\n * @param {Number} bottom Bottom bound of the frustum\\r\\n * @param {Number} top Top bound of the frustum\\r\\n * @param {Number} near Near bound of the frustum\\r\\n * @param {Number} far Far bound of the frustum\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction frustum(out, left, right, bottom, top, near, far) {\\n  var rl = 1 / (right - left);\\n  var tb = 1 / (top - bottom);\\n  var nf = 1 / (near - far);\\n  out[0] = near * 2 * rl;\\n  out[1] = 0;\\n  out[2] = 0;\\n  out[3] = 0;\\n  out[4] = 0;\\n  out[5] = near * 2 * tb;\\n  out[6] = 0;\\n  out[7] = 0;\\n  out[8] = (right + left) * rl;\\n  out[9] = (top + bottom) * tb;\\n  out[10] = (far + near) * nf;\\n  out[11] = -1;\\n  out[12] = 0;\\n  out[13] = 0;\\n  out[14] = far * near * 2 * nf;\\n  out[15] = 0;\\n  return out;\\n}\\n/**\\r\\n * Generates a perspective projection matrix with the given bounds.\\r\\n * Passing null/undefined/no value for far will generate infinite projection matrix.\\r\\n *\\r\\n * @param {mat4} out mat4 frustum matrix will be written into\\r\\n * @param {number} fovy Vertical field of view in radians\\r\\n * @param {number} aspect Aspect ratio. typically viewport width/height\\r\\n * @param {number} near Near bound of the frustum\\r\\n * @param {number} far Far bound of the frustum, can be null or Infinity\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction perspective(out, fovy, aspect, near, far) {\\n  var f = 1.0 / Math.tan(fovy / 2),\\n      nf;\\n  out[0] = f / aspect;\\n  out[1] = 0;\\n  out[2] = 0;\\n  out[3] = 0;\\n  out[4] = 0;\\n  out[5] = f;\\n  out[6] = 0;\\n  out[7] = 0;\\n  out[8] = 0;\\n  out[9] = 0;\\n  out[11] = -1;\\n  out[12] = 0;\\n  out[13] = 0;\\n  out[15] = 0;\\n\\n  if (far != null && far !== Infinity) {\\n    nf = 1 / (near - far);\\n    out[10] = (far + near) * nf;\\n    out[14] = 2 * far * near * nf;\\n  } else {\\n    out[10] = -1;\\n    out[14] = -2 * near;\\n  }\\n\\n  return out;\\n}\\n/**\\r\\n * Generates a perspective projection matrix with the given field of view.\\r\\n * This is primarily useful for generating projection matrices to be used\\r\\n * with the still experiemental WebVR API.\\r\\n *\\r\\n * @param {mat4} out mat4 frustum matrix will be written into\\r\\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\\r\\n * @param {number} near Near bound of the frustum\\r\\n * @param {number} far Far bound of the frustum\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\\n  var xScale = 2.0 / (leftTan + rightTan);\\n  var yScale = 2.0 / (upTan + downTan);\\n  out[0] = xScale;\\n  out[1] = 0.0;\\n  out[2] = 0.0;\\n  out[3] = 0.0;\\n  out[4] = 0.0;\\n  out[5] = yScale;\\n  out[6] = 0.0;\\n  out[7] = 0.0;\\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\\n  out[9] = (upTan - downTan) * yScale * 0.5;\\n  out[10] = far / (near - far);\\n  out[11] = -1.0;\\n  out[12] = 0.0;\\n  out[13] = 0.0;\\n  out[14] = far * near / (near - far);\\n  out[15] = 0.0;\\n  return out;\\n}\\n/**\\r\\n * Generates a orthogonal projection matrix with the given bounds\\r\\n *\\r\\n * @param {mat4} out mat4 frustum matrix will be written into\\r\\n * @param {number} left Left bound of the frustum\\r\\n * @param {number} right Right bound of the frustum\\r\\n * @param {number} bottom Bottom bound of the frustum\\r\\n * @param {number} top Top bound of the frustum\\r\\n * @param {number} near Near bound of the frustum\\r\\n * @param {number} far Far bound of the frustum\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction ortho(out, left, right, bottom, top, near, far) {\\n  var lr = 1 / (left - right);\\n  var bt = 1 / (bottom - top);\\n  var nf = 1 / (near - far);\\n  out[0] = -2 * lr;\\n  out[1] = 0;\\n  out[2] = 0;\\n  out[3] = 0;\\n  out[4] = 0;\\n  out[5] = -2 * bt;\\n  out[6] = 0;\\n  out[7] = 0;\\n  out[8] = 0;\\n  out[9] = 0;\\n  out[10] = 2 * nf;\\n  out[11] = 0;\\n  out[12] = (left + right) * lr;\\n  out[13] = (top + bottom) * bt;\\n  out[14] = (far + near) * nf;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\\r\\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\\r\\n *\\r\\n * @param {mat4} out mat4 frustum matrix will be written into\\r\\n * @param {ReadonlyVec3} eye Position of the viewer\\r\\n * @param {ReadonlyVec3} center Point the viewer is looking at\\r\\n * @param {ReadonlyVec3} up vec3 pointing up\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction lookAt(out, eye, center, up) {\\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\\n  var eyex = eye[0];\\n  var eyey = eye[1];\\n  var eyez = eye[2];\\n  var upx = up[0];\\n  var upy = up[1];\\n  var upz = up[2];\\n  var centerx = center[0];\\n  var centery = center[1];\\n  var centerz = center[2];\\n\\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\\n    return identity(out);\\n  }\\n\\n  z0 = eyex - centerx;\\n  z1 = eyey - centery;\\n  z2 = eyez - centerz;\\n  len = 1 / Math.hypot(z0, z1, z2);\\n  z0 *= len;\\n  z1 *= len;\\n  z2 *= len;\\n  x0 = upy * z2 - upz * z1;\\n  x1 = upz * z0 - upx * z2;\\n  x2 = upx * z1 - upy * z0;\\n  len = Math.hypot(x0, x1, x2);\\n\\n  if (!len) {\\n    x0 = 0;\\n    x1 = 0;\\n    x2 = 0;\\n  } else {\\n    len = 1 / len;\\n    x0 *= len;\\n    x1 *= len;\\n    x2 *= len;\\n  }\\n\\n  y0 = z1 * x2 - z2 * x1;\\n  y1 = z2 * x0 - z0 * x2;\\n  y2 = z0 * x1 - z1 * x0;\\n  len = Math.hypot(y0, y1, y2);\\n\\n  if (!len) {\\n    y0 = 0;\\n    y1 = 0;\\n    y2 = 0;\\n  } else {\\n    len = 1 / len;\\n    y0 *= len;\\n    y1 *= len;\\n    y2 *= len;\\n  }\\n\\n  out[0] = x0;\\n  out[1] = y0;\\n  out[2] = z0;\\n  out[3] = 0;\\n  out[4] = x1;\\n  out[5] = y1;\\n  out[6] = z1;\\n  out[7] = 0;\\n  out[8] = x2;\\n  out[9] = y2;\\n  out[10] = z2;\\n  out[11] = 0;\\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Generates a matrix that makes something look at something else.\\r\\n *\\r\\n * @param {mat4} out mat4 frustum matrix will be written into\\r\\n * @param {ReadonlyVec3} eye Position of the viewer\\r\\n * @param {ReadonlyVec3} center Point the viewer is looking at\\r\\n * @param {ReadonlyVec3} up vec3 pointing up\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction targetTo(out, eye, target, up) {\\n  var eyex = eye[0],\\n      eyey = eye[1],\\n      eyez = eye[2],\\n      upx = up[0],\\n      upy = up[1],\\n      upz = up[2];\\n  var z0 = eyex - target[0],\\n      z1 = eyey - target[1],\\n      z2 = eyez - target[2];\\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\\n\\n  if (len > 0) {\\n    len = 1 / Math.sqrt(len);\\n    z0 *= len;\\n    z1 *= len;\\n    z2 *= len;\\n  }\\n\\n  var x0 = upy * z2 - upz * z1,\\n      x1 = upz * z0 - upx * z2,\\n      x2 = upx * z1 - upy * z0;\\n  len = x0 * x0 + x1 * x1 + x2 * x2;\\n\\n  if (len > 0) {\\n    len = 1 / Math.sqrt(len);\\n    x0 *= len;\\n    x1 *= len;\\n    x2 *= len;\\n  }\\n\\n  out[0] = x0;\\n  out[1] = x1;\\n  out[2] = x2;\\n  out[3] = 0;\\n  out[4] = z1 * x2 - z2 * x1;\\n  out[5] = z2 * x0 - z0 * x2;\\n  out[6] = z0 * x1 - z1 * x0;\\n  out[7] = 0;\\n  out[8] = z0;\\n  out[9] = z1;\\n  out[10] = z2;\\n  out[11] = 0;\\n  out[12] = eyex;\\n  out[13] = eyey;\\n  out[14] = eyez;\\n  out[15] = 1;\\n  return out;\\n}\\n/**\\r\\n * Returns a string representation of a mat4\\r\\n *\\r\\n * @param {ReadonlyMat4} a matrix to represent as a string\\r\\n * @returns {String} string representation of the matrix\\r\\n */\\n\\nfunction str(a) {\\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\\n}\\n/**\\r\\n * Returns Frobenius norm of a mat4\\r\\n *\\r\\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\\r\\n * @returns {Number} Frobenius norm\\r\\n */\\n\\nfunction frob(a) {\\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\\n}\\n/**\\r\\n * Adds two mat4\\'s\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the first operand\\r\\n * @param {ReadonlyMat4} b the second operand\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction add(out, a, b) {\\n  out[0] = a[0] + b[0];\\n  out[1] = a[1] + b[1];\\n  out[2] = a[2] + b[2];\\n  out[3] = a[3] + b[3];\\n  out[4] = a[4] + b[4];\\n  out[5] = a[5] + b[5];\\n  out[6] = a[6] + b[6];\\n  out[7] = a[7] + b[7];\\n  out[8] = a[8] + b[8];\\n  out[9] = a[9] + b[9];\\n  out[10] = a[10] + b[10];\\n  out[11] = a[11] + b[11];\\n  out[12] = a[12] + b[12];\\n  out[13] = a[13] + b[13];\\n  out[14] = a[14] + b[14];\\n  out[15] = a[15] + b[15];\\n  return out;\\n}\\n/**\\r\\n * Subtracts matrix b from matrix a\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the first operand\\r\\n * @param {ReadonlyMat4} b the second operand\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction subtract(out, a, b) {\\n  out[0] = a[0] - b[0];\\n  out[1] = a[1] - b[1];\\n  out[2] = a[2] - b[2];\\n  out[3] = a[3] - b[3];\\n  out[4] = a[4] - b[4];\\n  out[5] = a[5] - b[5];\\n  out[6] = a[6] - b[6];\\n  out[7] = a[7] - b[7];\\n  out[8] = a[8] - b[8];\\n  out[9] = a[9] - b[9];\\n  out[10] = a[10] - b[10];\\n  out[11] = a[11] - b[11];\\n  out[12] = a[12] - b[12];\\n  out[13] = a[13] - b[13];\\n  out[14] = a[14] - b[14];\\n  out[15] = a[15] - b[15];\\n  return out;\\n}\\n/**\\r\\n * Multiply each element of the matrix by a scalar.\\r\\n *\\r\\n * @param {mat4} out the receiving matrix\\r\\n * @param {ReadonlyMat4} a the matrix to scale\\r\\n * @param {Number} b amount to scale the matrix\\'s elements by\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction multiplyScalar(out, a, b) {\\n  out[0] = a[0] * b;\\n  out[1] = a[1] * b;\\n  out[2] = a[2] * b;\\n  out[3] = a[3] * b;\\n  out[4] = a[4] * b;\\n  out[5] = a[5] * b;\\n  out[6] = a[6] * b;\\n  out[7] = a[7] * b;\\n  out[8] = a[8] * b;\\n  out[9] = a[9] * b;\\n  out[10] = a[10] * b;\\n  out[11] = a[11] * b;\\n  out[12] = a[12] * b;\\n  out[13] = a[13] * b;\\n  out[14] = a[14] * b;\\n  out[15] = a[15] * b;\\n  return out;\\n}\\n/**\\r\\n * Adds two mat4\\'s after multiplying each element of the second operand by a scalar value.\\r\\n *\\r\\n * @param {mat4} out the receiving vector\\r\\n * @param {ReadonlyMat4} a the first operand\\r\\n * @param {ReadonlyMat4} b the second operand\\r\\n * @param {Number} scale the amount to scale b\\'s elements by before adding\\r\\n * @returns {mat4} out\\r\\n */\\n\\nfunction multiplyScalarAndAdd(out, a, b, scale) {\\n  out[0] = a[0] + b[0] * scale;\\n  out[1] = a[1] + b[1] * scale;\\n  out[2] = a[2] + b[2] * scale;\\n  out[3] = a[3] + b[3] * scale;\\n  out[4] = a[4] + b[4] * scale;\\n  out[5] = a[5] + b[5] * scale;\\n  out[6] = a[6] + b[6] * scale;\\n  out[7] = a[7] + b[7] * scale;\\n  out[8] = a[8] + b[8] * scale;\\n  out[9] = a[9] + b[9] * scale;\\n  out[10] = a[10] + b[10] * scale;\\n  out[11] = a[11] + b[11] * scale;\\n  out[12] = a[12] + b[12] * scale;\\n  out[13] = a[13] + b[13] * scale;\\n  out[14] = a[14] + b[14] * scale;\\n  out[15] = a[15] + b[15] * scale;\\n  return out;\\n}\\n/**\\r\\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\\r\\n *\\r\\n * @param {ReadonlyMat4} a The first matrix.\\r\\n * @param {ReadonlyMat4} b The second matrix.\\r\\n * @returns {Boolean} True if the matrices are equal, false otherwise.\\r\\n */\\n\\nfunction exactEquals(a, b) {\\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\\n}\\n/**\\r\\n * Returns whether or not the matrices have approximately the same elements in the same position.\\r\\n *\\r\\n * @param {ReadonlyMat4} a The first matrix.\\r\\n * @param {ReadonlyMat4} b The second matrix.\\r\\n * @returns {Boolean} True if the matrices are equal, false otherwise.\\r\\n */\\n\\nfunction mat4_equals(a, b) {\\n  var a0 = a[0],\\n      a1 = a[1],\\n      a2 = a[2],\\n      a3 = a[3];\\n  var a4 = a[4],\\n      a5 = a[5],\\n      a6 = a[6],\\n      a7 = a[7];\\n  var a8 = a[8],\\n      a9 = a[9],\\n      a10 = a[10],\\n      a11 = a[11];\\n  var a12 = a[12],\\n      a13 = a[13],\\n      a14 = a[14],\\n      a15 = a[15];\\n  var b0 = b[0],\\n      b1 = b[1],\\n      b2 = b[2],\\n      b3 = b[3];\\n  var b4 = b[4],\\n      b5 = b[5],\\n      b6 = b[6],\\n      b7 = b[7];\\n  var b8 = b[8],\\n      b9 = b[9],\\n      b10 = b[10],\\n      b11 = b[11];\\n  var b12 = b[12],\\n      b13 = b[13],\\n      b14 = b[14],\\n      b15 = b[15];\\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\\n}\\n/**\\r\\n * Alias for {@link mat4.multiply}\\r\\n * @function\\r\\n */\\n\\nvar mul = (/* unused pure expression or super */ null && (multiply));\\n/**\\r\\n * Alias for {@link mat4.subtract}\\r\\n * @function\\r\\n */\\n\\nvar sub = (/* unused pure expression or super */ null && (subtract));\\n;// CONCATENATED MODULE: ./node_modules/roughjs/bin/math.js\\nfunction randomSeed() {\\n    return Math.floor(Math.random() * 2 ** 31);\\n}\\nclass Random {\\n    constructor(seed) {\\n        this.seed = seed;\\n    }\\n    next() {\\n        if (this.seed) {\\n            return ((2 ** 31 - 1) & (this.seed = Math.imul(48271, this.seed))) / 2 ** 31;\\n        }\\n        else {\\n            return Math.random();\\n        }\\n    }\\n}\\n\\n;// CONCATENATED MODULE: ./node_modules/nanoid/index.prod.js\\n// This file replaces `index.js` in bundlers like webpack or Rollup,\\n// according to `browser` config in `package.json`.\\n\\n\\n\\nif (false) {}\\n\\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\\n\\nlet customRandom = (alphabet, size, getRandom) => {\\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\\n  // values closer to the alphabet size. The bitmask calculates the closest\\n  // `2^31 - 1` number, which exceeds the alphabet size.\\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\\n  // `Math.clz32` is not used, because it is not available in browsers.\\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\\n  // Though, the bitmask solution is not perfect since the bytes exceeding\\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\\n  // the random bytes redundancy has to be satisfied.\\n\\n  // Note: every hardware random generator call is performance expensive,\\n  // because the system call for entropy collection takes a lot of time.\\n  // So, to avoid additional system calls, extra bytes are requested in advance.\\n\\n  // Next, a step determines how many random bytes to generate.\\n  // The number of random bytes gets decided upon the ID size, mask,\\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\\n  // according to benchmarks).\\n\\n  // `-~f => Math.ceil(f)` if f is a float\\n  // `-~i => i + 1` if i is an integer\\n  let step = -~((1.6 * mask * size) / alphabet.length)\\n\\n  return () => {\\n    let id = \\'\\'\\n    while (true) {\\n      let bytes = getRandom(step)\\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\\n      let j = step\\n      while (j--) {\\n        // Adding `|| \\'\\'` refuses a random byte that exceeds the alphabet size.\\n        id += alphabet[bytes[j] & mask] || \\'\\'\\n        if (id.length === size) return id\\n      }\\n    }\\n  }\\n}\\n\\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\\n\\nlet nanoid = (size = 21) => {\\n  let id = \\'\\'\\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\\n\\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\\n  while (size--) {\\n    // It is incorrect to use bytes exceeding the alphabet size.\\n    // The following mask reduces the random byte in the 0-255 value\\n    // range to the 0-63 value range. Therefore, adding hacks, such\\n    // as empty string fallback or magic numbers, is unneccessary because\\n    // the bitmask trims bytes down to the alphabet size.\\n    let byte = bytes[size] & 63\\n    if (byte < 36) {\\n      // `0-9a-z`\\n      id += byte.toString(36)\\n    } else if (byte < 62) {\\n      // `A-Z`\\n      id += (byte - 26).toString(36).toUpperCase()\\n    } else if (byte < 63) {\\n      id += \\'_\\'\\n    } else {\\n      id += \\'-\\'\\n    }\\n  }\\n  return id\\n}\\n\\n\\n\\n;// CONCATENATED MODULE: ./src/utils.ts\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\nvar utils_random = new Random(Date.now());\\nvar randomInteger = function randomInteger() {\\n  return Math.floor(utils_random.next() * Math.pow(2, 31));\\n};\\nvar randomId = function randomId() {\\n  return nanoid();\\n};\\nvar safeNumber = function safeNumber(number) {\\n  return Number(number.toFixed(2));\\n};\\nfunction dimensionsFromPoints(points) {\\n  var xCoords = points.map(function (_ref) {\\n    var _ref2 = _slicedToArray(_ref, 1),\\n        x = _ref2[0];\\n\\n    return x;\\n  });\\n  var yCoords = points.map(function (_ref3) {\\n    var _ref4 = _slicedToArray(_ref3, 2),\\n        y = _ref4[1];\\n\\n    return y;\\n  });\\n  var minX = Math.min.apply(Math, _toConsumableArray(xCoords));\\n  var minY = Math.min.apply(Math, _toConsumableArray(yCoords));\\n  var maxX = Math.max.apply(Math, _toConsumableArray(xCoords));\\n  var maxY = Math.max.apply(Math, _toConsumableArray(yCoords));\\n  return [maxX - minX, maxY - minY];\\n} // winding order is clockwise values is positive, counter clockwise if negative.\\n\\nfunction getWindingOrder(points) {\\n  var total = points.reduce(function (acc, _ref5, idx, arr) {\\n    var _ref6 = _slicedToArray(_ref5, 2),\\n        x1 = _ref6[0],\\n        y1 = _ref6[1];\\n\\n    var p2 = arr[idx + 1];\\n    var x2 = p2 ? p2[0] : 0;\\n    var y2 = p2 ? p2[1] : 0;\\n    var e = (x2 - x1) * (y2 + y1);\\n    return e + acc;\\n  }, 0);\\n  return total > 0 ? \"clockwise\" : \"counterclockwise\";\\n}\\n// EXTERNAL MODULE: ./node_modules/chroma-js/chroma.js\\nvar chroma = __webpack_require__(792);\\nvar chroma_default = /*#__PURE__*/__webpack_require__.n(chroma);\\n;// CONCATENATED MODULE: ./src/attributes.ts\\nfunction attributes_toConsumableArray(arr) { return attributes_arrayWithoutHoles(arr) || attributes_iterableToArray(arr) || attributes_unsupportedIterableToArray(arr) || attributes_nonIterableSpread(); }\\n\\nfunction attributes_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction attributes_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return attributes_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return attributes_arrayLikeToArray(o, minLen); }\\n\\nfunction attributes_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\\n\\nfunction attributes_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return attributes_arrayLikeToArray(arr); }\\n\\nfunction attributes_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\n\\nfunction hexWithAlpha(color, alpha) {\\n  return chroma_default()(color).alpha(alpha).css();\\n}\\nfunction has(el, attr) {\\n  return el.hasAttribute(attr);\\n}\\nfunction get(el, attr, backup) {\\n  return el.getAttribute(attr) || backup || \"\";\\n}\\nfunction getNum(el, attr, backup) {\\n  var numVal = Number(get(el, attr));\\n  return numVal === NaN ? backup || 0 : numVal;\\n}\\nvar presAttrs = {\\n  stroke: \"stroke\",\\n  \"stroke-opacity\": \"stroke-opacity\",\\n  \"stroke-width\": \"stroke-width\",\\n  fill: \"fill\",\\n  \"fill-opacity\": \"fill-opacity\",\\n  opacity: \"opacity\"\\n};\\nvar attrHandlers = {\\n  stroke: function stroke(_ref) {\\n    var el = _ref.el,\\n        exVals = _ref.exVals;\\n    var strokeColor = get(el, \"stroke\");\\n    exVals.strokeColor = has(el, \"stroke-opacity\") ? hexWithAlpha(strokeColor, getNum(el, \"stroke-opacity\")) : strokeColor;\\n  },\\n  \"stroke-opacity\": function strokeOpacity(_ref2) {\\n    var el = _ref2.el,\\n        exVals = _ref2.exVals;\\n    exVals.strokeColor = hexWithAlpha(get(el, \"stroke\", \"#000000\"), getNum(el, \"stroke-opacity\"));\\n  },\\n  \"stroke-width\": function strokeWidth(_ref3) {\\n    var el = _ref3.el,\\n        exVals = _ref3.exVals;\\n    exVals.strokeWidth = getNum(el, \"stroke-width\");\\n  },\\n  fill: function fill(_ref4) {\\n    var el = _ref4.el,\\n        exVals = _ref4.exVals;\\n    var fill = get(el, \"fill\");\\n    exVals.backgroundColor = fill === \"none\" ? \"#00000000\" : fill;\\n  },\\n  \"fill-opacity\": function fillOpacity(_ref5) {\\n    var el = _ref5.el,\\n        exVals = _ref5.exVals;\\n    exVals.backgroundColor = hexWithAlpha(get(el, \"fill\", \"#000000\"), getNum(el, \"fill-opacity\"));\\n  },\\n  opacity: function opacity(_ref6) {\\n    var el = _ref6.el,\\n        exVals = _ref6.exVals;\\n    exVals.opacity = getNum(el, \"opacity\", 100);\\n  }\\n}; // Presentation Attributes for SVG Elements:\\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/Presentation\\n\\nfunction presAttrsToElementValues(el) {\\n  var exVals = attributes_toConsumableArray(el.attributes).reduce(function (exVals, attr) {\\n    var name = attr.name;\\n\\n    if (Object.keys(attrHandlers).includes(name)) {\\n      attrHandlers[name]({\\n        el: el,\\n        exVals: exVals\\n      });\\n    }\\n\\n    return exVals;\\n  }, {});\\n\\n  return exVals;\\n}\\nfunction filterAttrsToElementValues(el) {\\n  var filterVals = {};\\n\\n  if (has(el, \"x\")) {\\n    filterVals.x = getNum(el, \"x\");\\n  }\\n\\n  if (has(el, \"y\")) {\\n    filterVals.y = getNum(el, \"y\");\\n  }\\n\\n  if (has(el, \"width\")) {\\n    filterVals.width = getNum(el, \"width\");\\n  }\\n\\n  if (has(el, \"height\")) {\\n    filterVals.height = getNum(el, \"height\");\\n  }\\n\\n  return filterVals;\\n}\\nfunction pointsAttrToPoints(el) {\\n  var points = [];\\n\\n  if (has(el, \"points\")) {\\n    points = get(el, \"points\").split(\" \").map(function (p) {\\n      return p.split(\",\").map(parseFloat);\\n    });\\n  }\\n\\n  return points;\\n}\\n;// CONCATENATED MODULE: ./src/elements/Group.ts\\nfunction Group_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction Group_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction Group_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Group_ownKeys(Object(source), true).forEach(function (key) { Group_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Group_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction Group_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\nfunction getGroupAttrs(groups) {\\n  return groups.reduce(function (acc, _ref) {\\n    var element = _ref.element;\\n    var elVals = presAttrsToElementValues(element);\\n    return Group_objectSpread(Group_objectSpread({}, acc), elVals);\\n  }, {});\\n}\\n\\nvar Group = function Group(element) {\\n  Group_classCallCheck(this, Group);\\n\\n  Group_defineProperty(this, \"id\", randomId());\\n\\n  Group_defineProperty(this, \"element\", void 0);\\n\\n  this.element = element;\\n};\\n\\n/* harmony default export */ const elements_Group = (Group);\\n;// CONCATENATED MODULE: ./src/elements/ExcalidrawElement.ts\\nfunction ExcalidrawElement_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction ExcalidrawElement_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ExcalidrawElement_ownKeys(Object(source), true).forEach(function (key) { ExcalidrawElement_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ExcalidrawElement_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction ExcalidrawElement_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\nfunction createExElement() {\\n  return {\\n    id: randomId(),\\n    x: 0,\\n    y: 0,\\n    strokeColor: \"#000000\",\\n    backgroundColor: \"#000000\",\\n    fillStyle: \"solid\",\\n    strokeWidth: 1,\\n    strokeStyle: \"solid\",\\n    strokeSharpness: \"sharp\",\\n    roughness: 0,\\n    opacity: 100,\\n    width: 0,\\n    height: 0,\\n    angle: 0,\\n    seed: randomInteger(),\\n    version: 0,\\n    versionNonce: 0,\\n    isDeleted: false,\\n    groupIds: [],\\n    boundElementIds: null\\n  };\\n}\\nfunction createExRect() {\\n  return ExcalidrawElement_objectSpread(ExcalidrawElement_objectSpread({}, createExElement()), {}, {\\n    type: \"rectangle\"\\n  });\\n}\\nfunction createExLine() {\\n  return ExcalidrawElement_objectSpread(ExcalidrawElement_objectSpread({}, createExElement()), {}, {\\n    type: \"line\",\\n    points: []\\n  });\\n}\\nfunction createExEllipse() {\\n  return ExcalidrawElement_objectSpread(ExcalidrawElement_objectSpread({}, createExElement()), {}, {\\n    type: \"ellipse\"\\n  });\\n}\\nfunction createExDraw() {\\n  return ExcalidrawElement_objectSpread(ExcalidrawElement_objectSpread({}, createExElement()), {}, {\\n    type: \"draw\",\\n    points: []\\n  });\\n}\\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec3.js\\n\\n/**\\r\\n * 3 Dimensional Vector\\r\\n * @module vec3\\r\\n */\\n\\n/**\\r\\n * Creates a new, empty vec3\\r\\n *\\r\\n * @returns {vec3} a new 3D vector\\r\\n */\\n\\nfunction vec3_create() {\\n  var out = new ARRAY_TYPE(3);\\n\\n  if (ARRAY_TYPE != Float32Array) {\\n    out[0] = 0;\\n    out[1] = 0;\\n    out[2] = 0;\\n  }\\n\\n  return out;\\n}\\n/**\\r\\n * Creates a new vec3 initialized with values from an existing vector\\r\\n *\\r\\n * @param {ReadonlyVec3} a vector to clone\\r\\n * @returns {vec3} a new 3D vector\\r\\n */\\n\\nfunction vec3_clone(a) {\\n  var out = new glMatrix.ARRAY_TYPE(3);\\n  out[0] = a[0];\\n  out[1] = a[1];\\n  out[2] = a[2];\\n  return out;\\n}\\n/**\\r\\n * Calculates the length of a vec3\\r\\n *\\r\\n * @param {ReadonlyVec3} a vector to calculate length of\\r\\n * @returns {Number} length of a\\r\\n */\\n\\nfunction vec3_length(a) {\\n  var x = a[0];\\n  var y = a[1];\\n  var z = a[2];\\n  return Math.hypot(x, y, z);\\n}\\n/**\\r\\n * Creates a new vec3 initialized with the given values\\r\\n *\\r\\n * @param {Number} x X component\\r\\n * @param {Number} y Y component\\r\\n * @param {Number} z Z component\\r\\n * @returns {vec3} a new 3D vector\\r\\n */\\n\\nfunction vec3_fromValues(x, y, z) {\\n  var out = new ARRAY_TYPE(3);\\n  out[0] = x;\\n  out[1] = y;\\n  out[2] = z;\\n  return out;\\n}\\n/**\\r\\n * Copy the values from one vec3 to another\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the source vector\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_copy(out, a) {\\n  out[0] = a[0];\\n  out[1] = a[1];\\n  out[2] = a[2];\\n  return out;\\n}\\n/**\\r\\n * Set the components of a vec3 to the given values\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {Number} x X component\\r\\n * @param {Number} y Y component\\r\\n * @param {Number} z Z component\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_set(out, x, y, z) {\\n  out[0] = x;\\n  out[1] = y;\\n  out[2] = z;\\n  return out;\\n}\\n/**\\r\\n * Adds two vec3\\'s\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_add(out, a, b) {\\n  out[0] = a[0] + b[0];\\n  out[1] = a[1] + b[1];\\n  out[2] = a[2] + b[2];\\n  return out;\\n}\\n/**\\r\\n * Subtracts vector b from vector a\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_subtract(out, a, b) {\\n  out[0] = a[0] - b[0];\\n  out[1] = a[1] - b[1];\\n  out[2] = a[2] - b[2];\\n  return out;\\n}\\n/**\\r\\n * Multiplies two vec3\\'s\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_multiply(out, a, b) {\\n  out[0] = a[0] * b[0];\\n  out[1] = a[1] * b[1];\\n  out[2] = a[2] * b[2];\\n  return out;\\n}\\n/**\\r\\n * Divides two vec3\\'s\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction divide(out, a, b) {\\n  out[0] = a[0] / b[0];\\n  out[1] = a[1] / b[1];\\n  out[2] = a[2] / b[2];\\n  return out;\\n}\\n/**\\r\\n * Math.ceil the components of a vec3\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a vector to ceil\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction ceil(out, a) {\\n  out[0] = Math.ceil(a[0]);\\n  out[1] = Math.ceil(a[1]);\\n  out[2] = Math.ceil(a[2]);\\n  return out;\\n}\\n/**\\r\\n * Math.floor the components of a vec3\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a vector to floor\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction floor(out, a) {\\n  out[0] = Math.floor(a[0]);\\n  out[1] = Math.floor(a[1]);\\n  out[2] = Math.floor(a[2]);\\n  return out;\\n}\\n/**\\r\\n * Returns the minimum of two vec3\\'s\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction min(out, a, b) {\\n  out[0] = Math.min(a[0], b[0]);\\n  out[1] = Math.min(a[1], b[1]);\\n  out[2] = Math.min(a[2], b[2]);\\n  return out;\\n}\\n/**\\r\\n * Returns the maximum of two vec3\\'s\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction max(out, a, b) {\\n  out[0] = Math.max(a[0], b[0]);\\n  out[1] = Math.max(a[1], b[1]);\\n  out[2] = Math.max(a[2], b[2]);\\n  return out;\\n}\\n/**\\r\\n * Math.round the components of a vec3\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a vector to round\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction round(out, a) {\\n  out[0] = Math.round(a[0]);\\n  out[1] = Math.round(a[1]);\\n  out[2] = Math.round(a[2]);\\n  return out;\\n}\\n/**\\r\\n * Scales a vec3 by a scalar number\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the vector to scale\\r\\n * @param {Number} b amount to scale the vector by\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_scale(out, a, b) {\\n  out[0] = a[0] * b;\\n  out[1] = a[1] * b;\\n  out[2] = a[2] * b;\\n  return out;\\n}\\n/**\\r\\n * Adds two vec3\\'s after scaling the second operand by a scalar value\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @param {Number} scale the amount to scale b by before adding\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction scaleAndAdd(out, a, b, scale) {\\n  out[0] = a[0] + b[0] * scale;\\n  out[1] = a[1] + b[1] * scale;\\n  out[2] = a[2] + b[2] * scale;\\n  return out;\\n}\\n/**\\r\\n * Calculates the euclidian distance between two vec3\\'s\\r\\n *\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {Number} distance between a and b\\r\\n */\\n\\nfunction distance(a, b) {\\n  var x = b[0] - a[0];\\n  var y = b[1] - a[1];\\n  var z = b[2] - a[2];\\n  return Math.hypot(x, y, z);\\n}\\n/**\\r\\n * Calculates the squared euclidian distance between two vec3\\'s\\r\\n *\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {Number} squared distance between a and b\\r\\n */\\n\\nfunction squaredDistance(a, b) {\\n  var x = b[0] - a[0];\\n  var y = b[1] - a[1];\\n  var z = b[2] - a[2];\\n  return x * x + y * y + z * z;\\n}\\n/**\\r\\n * Calculates the squared length of a vec3\\r\\n *\\r\\n * @param {ReadonlyVec3} a vector to calculate squared length of\\r\\n * @returns {Number} squared length of a\\r\\n */\\n\\nfunction squaredLength(a) {\\n  var x = a[0];\\n  var y = a[1];\\n  var z = a[2];\\n  return x * x + y * y + z * z;\\n}\\n/**\\r\\n * Negates the components of a vec3\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a vector to negate\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction negate(out, a) {\\n  out[0] = -a[0];\\n  out[1] = -a[1];\\n  out[2] = -a[2];\\n  return out;\\n}\\n/**\\r\\n * Returns the inverse of the components of a vec3\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a vector to invert\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction inverse(out, a) {\\n  out[0] = 1.0 / a[0];\\n  out[1] = 1.0 / a[1];\\n  out[2] = 1.0 / a[2];\\n  return out;\\n}\\n/**\\r\\n * Normalize a vec3\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a vector to normalize\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction normalize(out, a) {\\n  var x = a[0];\\n  var y = a[1];\\n  var z = a[2];\\n  var len = x * x + y * y + z * z;\\n\\n  if (len > 0) {\\n    //TODO: evaluate use of glm_invsqrt here?\\n    len = 1 / Math.sqrt(len);\\n  }\\n\\n  out[0] = a[0] * len;\\n  out[1] = a[1] * len;\\n  out[2] = a[2] * len;\\n  return out;\\n}\\n/**\\r\\n * Calculates the dot product of two vec3\\'s\\r\\n *\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {Number} dot product of a and b\\r\\n */\\n\\nfunction dot(a, b) {\\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\\n}\\n/**\\r\\n * Computes the cross product of two vec3\\'s\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction cross(out, a, b) {\\n  var ax = a[0],\\n      ay = a[1],\\n      az = a[2];\\n  var bx = b[0],\\n      by = b[1],\\n      bz = b[2];\\n  out[0] = ay * bz - az * by;\\n  out[1] = az * bx - ax * bz;\\n  out[2] = ax * by - ay * bx;\\n  return out;\\n}\\n/**\\r\\n * Performs a linear interpolation between two vec3\\'s\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction lerp(out, a, b, t) {\\n  var ax = a[0];\\n  var ay = a[1];\\n  var az = a[2];\\n  out[0] = ax + t * (b[0] - ax);\\n  out[1] = ay + t * (b[1] - ay);\\n  out[2] = az + t * (b[2] - az);\\n  return out;\\n}\\n/**\\r\\n * Performs a hermite interpolation with two control points\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @param {ReadonlyVec3} c the third operand\\r\\n * @param {ReadonlyVec3} d the fourth operand\\r\\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction hermite(out, a, b, c, d, t) {\\n  var factorTimes2 = t * t;\\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\\n  var factor2 = factorTimes2 * (t - 2) + t;\\n  var factor3 = factorTimes2 * (t - 1);\\n  var factor4 = factorTimes2 * (3 - 2 * t);\\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\\n  return out;\\n}\\n/**\\r\\n * Performs a bezier interpolation with two control points\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the first operand\\r\\n * @param {ReadonlyVec3} b the second operand\\r\\n * @param {ReadonlyVec3} c the third operand\\r\\n * @param {ReadonlyVec3} d the fourth operand\\r\\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction bezier(out, a, b, c, d, t) {\\n  var inverseFactor = 1 - t;\\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\\n  var factorTimes2 = t * t;\\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\\n  var factor2 = 3 * t * inverseFactorTimesTwo;\\n  var factor3 = 3 * factorTimes2 * inverseFactor;\\n  var factor4 = factorTimes2 * t;\\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\\n  return out;\\n}\\n/**\\r\\n * Generates a random vector with the given scale\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_random(out, scale) {\\n  scale = scale || 1.0;\\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\\n  out[0] = Math.cos(r) * zScale;\\n  out[1] = Math.sin(r) * zScale;\\n  out[2] = z * scale;\\n  return out;\\n}\\n/**\\r\\n * Transforms the vec3 with a mat4.\\r\\n * 4th vector component is implicitly \\'1\\'\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the vector to transform\\r\\n * @param {ReadonlyMat4} m matrix to transform with\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction transformMat4(out, a, m) {\\n  var x = a[0],\\n      y = a[1],\\n      z = a[2];\\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\\n  w = w || 1.0;\\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\\n  return out;\\n}\\n/**\\r\\n * Transforms the vec3 with a mat3.\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the vector to transform\\r\\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction transformMat3(out, a, m) {\\n  var x = a[0],\\n      y = a[1],\\n      z = a[2];\\n  out[0] = x * m[0] + y * m[3] + z * m[6];\\n  out[1] = x * m[1] + y * m[4] + z * m[7];\\n  out[2] = x * m[2] + y * m[5] + z * m[8];\\n  return out;\\n}\\n/**\\r\\n * Transforms the vec3 with a quat\\r\\n * Can also be used for dual quaternions. (Multiply it with the real part)\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @param {ReadonlyVec3} a the vector to transform\\r\\n * @param {ReadonlyQuat} q quaternion to transform with\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction transformQuat(out, a, q) {\\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\\n  var qx = q[0],\\n      qy = q[1],\\n      qz = q[2],\\n      qw = q[3];\\n  var x = a[0],\\n      y = a[1],\\n      z = a[2]; // var qvec = [qx, qy, qz];\\n  // var uv = vec3.cross([], qvec, a);\\n\\n  var uvx = qy * z - qz * y,\\n      uvy = qz * x - qx * z,\\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\\n\\n  var uuvx = qy * uvz - qz * uvy,\\n      uuvy = qz * uvx - qx * uvz,\\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\\n\\n  var w2 = qw * 2;\\n  uvx *= w2;\\n  uvy *= w2;\\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\\n\\n  uuvx *= 2;\\n  uuvy *= 2;\\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\\n\\n  out[0] = x + uvx + uuvx;\\n  out[1] = y + uvy + uuvy;\\n  out[2] = z + uvz + uuvz;\\n  return out;\\n}\\n/**\\r\\n * Rotate a 3D vector around the x-axis\\r\\n * @param {vec3} out The receiving vec3\\r\\n * @param {ReadonlyVec3} a The vec3 point to rotate\\r\\n * @param {ReadonlyVec3} b The origin of the rotation\\r\\n * @param {Number} rad The angle of rotation in radians\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_rotateX(out, a, b, rad) {\\n  var p = [],\\n      r = []; //Translate point to the origin\\n\\n  p[0] = a[0] - b[0];\\n  p[1] = a[1] - b[1];\\n  p[2] = a[2] - b[2]; //perform rotation\\n\\n  r[0] = p[0];\\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\\n\\n  out[0] = r[0] + b[0];\\n  out[1] = r[1] + b[1];\\n  out[2] = r[2] + b[2];\\n  return out;\\n}\\n/**\\r\\n * Rotate a 3D vector around the y-axis\\r\\n * @param {vec3} out The receiving vec3\\r\\n * @param {ReadonlyVec3} a The vec3 point to rotate\\r\\n * @param {ReadonlyVec3} b The origin of the rotation\\r\\n * @param {Number} rad The angle of rotation in radians\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_rotateY(out, a, b, rad) {\\n  var p = [],\\n      r = []; //Translate point to the origin\\n\\n  p[0] = a[0] - b[0];\\n  p[1] = a[1] - b[1];\\n  p[2] = a[2] - b[2]; //perform rotation\\n\\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\\n  r[1] = p[1];\\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\\n\\n  out[0] = r[0] + b[0];\\n  out[1] = r[1] + b[1];\\n  out[2] = r[2] + b[2];\\n  return out;\\n}\\n/**\\r\\n * Rotate a 3D vector around the z-axis\\r\\n * @param {vec3} out The receiving vec3\\r\\n * @param {ReadonlyVec3} a The vec3 point to rotate\\r\\n * @param {ReadonlyVec3} b The origin of the rotation\\r\\n * @param {Number} rad The angle of rotation in radians\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction vec3_rotateZ(out, a, b, rad) {\\n  var p = [],\\n      r = []; //Translate point to the origin\\n\\n  p[0] = a[0] - b[0];\\n  p[1] = a[1] - b[1];\\n  p[2] = a[2] - b[2]; //perform rotation\\n\\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\\n  r[2] = p[2]; //translate to correct position\\n\\n  out[0] = r[0] + b[0];\\n  out[1] = r[1] + b[1];\\n  out[2] = r[2] + b[2];\\n  return out;\\n}\\n/**\\r\\n * Get the angle between two 3D vectors\\r\\n * @param {ReadonlyVec3} a The first operand\\r\\n * @param {ReadonlyVec3} b The second operand\\r\\n * @returns {Number} The angle in radians\\r\\n */\\n\\nfunction angle(a, b) {\\n  var ax = a[0],\\n      ay = a[1],\\n      az = a[2],\\n      bx = b[0],\\n      by = b[1],\\n      bz = b[2],\\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\\n      mag = mag1 * mag2,\\n      cosine = mag && dot(a, b) / mag;\\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\\n}\\n/**\\r\\n * Set the components of a vec3 to zero\\r\\n *\\r\\n * @param {vec3} out the receiving vector\\r\\n * @returns {vec3} out\\r\\n */\\n\\nfunction zero(out) {\\n  out[0] = 0.0;\\n  out[1] = 0.0;\\n  out[2] = 0.0;\\n  return out;\\n}\\n/**\\r\\n * Returns a string representation of a vector\\r\\n *\\r\\n * @param {ReadonlyVec3} a vector to represent as a string\\r\\n * @returns {String} string representation of the vector\\r\\n */\\n\\nfunction vec3_str(a) {\\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\\n}\\n/**\\r\\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\\r\\n *\\r\\n * @param {ReadonlyVec3} a The first vector.\\r\\n * @param {ReadonlyVec3} b The second vector.\\r\\n * @returns {Boolean} True if the vectors are equal, false otherwise.\\r\\n */\\n\\nfunction vec3_exactEquals(a, b) {\\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\\n}\\n/**\\r\\n * Returns whether or not the vectors have approximately the same elements in the same position.\\r\\n *\\r\\n * @param {ReadonlyVec3} a The first vector.\\r\\n * @param {ReadonlyVec3} b The second vector.\\r\\n * @returns {Boolean} True if the vectors are equal, false otherwise.\\r\\n */\\n\\nfunction vec3_equals(a, b) {\\n  var a0 = a[0],\\n      a1 = a[1],\\n      a2 = a[2];\\n  var b0 = b[0],\\n      b1 = b[1],\\n      b2 = b[2];\\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\\n}\\n/**\\r\\n * Alias for {@link vec3.subtract}\\r\\n * @function\\r\\n */\\n\\nvar vec3_sub = (/* unused pure expression or super */ null && (vec3_subtract));\\n/**\\r\\n * Alias for {@link vec3.multiply}\\r\\n * @function\\r\\n */\\n\\nvar vec3_mul = (/* unused pure expression or super */ null && (vec3_multiply));\\n/**\\r\\n * Alias for {@link vec3.divide}\\r\\n * @function\\r\\n */\\n\\nvar div = (/* unused pure expression or super */ null && (divide));\\n/**\\r\\n * Alias for {@link vec3.distance}\\r\\n * @function\\r\\n */\\n\\nvar dist = (/* unused pure expression or super */ null && (distance));\\n/**\\r\\n * Alias for {@link vec3.squaredDistance}\\r\\n * @function\\r\\n */\\n\\nvar sqrDist = (/* unused pure expression or super */ null && (squaredDistance));\\n/**\\r\\n * Alias for {@link vec3.length}\\r\\n * @function\\r\\n */\\n\\nvar len = (/* unused pure expression or super */ null && (vec3_length));\\n/**\\r\\n * Alias for {@link vec3.squaredLength}\\r\\n * @function\\r\\n */\\n\\nvar sqrLen = (/* unused pure expression or super */ null && (squaredLength));\\n/**\\r\\n * Perform some operation over an array of vec3s.\\r\\n *\\r\\n * @param {Array} a the array of vectors to iterate over\\r\\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\\r\\n * @param {Number} offset Number of elements to skip at the beginning of the array\\r\\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\\r\\n * @param {Function} fn Function to call for each vector in the array\\r\\n * @param {Object} [arg] additional argument to pass to fn\\r\\n * @returns {Array} a\\r\\n * @function\\r\\n */\\n\\nvar forEach = function () {\\n  var vec = vec3_create();\\n  return function (a, stride, offset, count, fn, arg) {\\n    var i, l;\\n\\n    if (!stride) {\\n      stride = 3;\\n    }\\n\\n    if (!offset) {\\n      offset = 0;\\n    }\\n\\n    if (count) {\\n      l = Math.min(count * stride + offset, a.length);\\n    } else {\\n      l = a.length;\\n    }\\n\\n    for (i = offset; i < l; i += stride) {\\n      vec[0] = a[i];\\n      vec[1] = a[i + 1];\\n      vec[2] = a[i + 2];\\n      fn(vec, vec, arg);\\n      a[i] = vec[0];\\n      a[i + 1] = vec[1];\\n      a[i + 2] = vec[2];\\n    }\\n\\n    return a;\\n  };\\n}();\\n;// CONCATENATED MODULE: ./src/transform.ts\\nfunction transform_slicedToArray(arr, i) { return transform_arrayWithHoles(arr) || transform_iterableToArrayLimit(arr, i) || transform_unsupportedIterableToArray(arr, i) || transform_nonIterableRest(); }\\n\\nfunction transform_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction transform_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return transform_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return transform_arrayLikeToArray(o, minLen); }\\n\\nfunction transform_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction transform_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction transform_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n/*\\nSVG transform attr is a bit strange in that it can accept traditional\\ncss transform string (at least per spec) as well as a it\\'s own \"unitless\"\\nversion of transform functions.\\n\\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform\\n*/\\n\\nvar transformFunctions = {\\n  matrix: \"matrix\",\\n  matrix3d: \"matrix3d\",\\n  perspective: \"perspective\",\\n  rotate: \"rotate\",\\n  rotate3d: \"rotate3d\",\\n  rotateX: \"rotateX\",\\n  rotateY: \"rotateY\",\\n  rotateZ: \"rotateZ\",\\n  scale: \"scale\",\\n  scale3d: \"scale3d\",\\n  scaleX: \"scaleX\",\\n  scaleY: \"scaleY\",\\n  scaleZ: \"scaleZ\",\\n  skew: \"skew\",\\n  skewX: \"skewX\",\\n  skewY: \"skewY\",\\n  translate: \"translate\",\\n  translate3d: \"translate3d\",\\n  translateX: \"translateX\",\\n  translateY: \"translateY\",\\n  translateZ: \"translateZ\"\\n};\\nvar transformFunctionsArr = Object.keys(transformFunctions); // type Transform\\n\\nvar defaultUnits = {\\n  matrix: \"\",\\n  matrix3d: \"\",\\n  perspective: \"perspective\",\\n  rotate: \"deg\",\\n  rotate3d: \"deg\",\\n  rotateX: \"deg\",\\n  rotateY: \"deg\",\\n  rotateZ: \"deg\",\\n  scale: \"\",\\n  scale3d: \"\",\\n  scaleX: \"\",\\n  scaleY: \"\",\\n  scaleZ: \"\",\\n  skew: \"skew\",\\n  skewX: \"deg\",\\n  skewY: \"deg\",\\n  translate: \"px\",\\n  translate3d: \"px\",\\n  translateX: \"px\",\\n  translateY: \"px\",\\n  translateZ: \"px\"\\n}; // Convert between possible svg transform attribute values to css transform attribute values.\\n\\nvar svgTransformToCSSTransform = function svgTransformToCSSTransform(svgTransformStr) {\\n  // Create transform function string \"chunks\", e.g \"rotate(90deg)\"\\n  var tFuncs = svgTransformStr.match(/(\\\\w+)\\\\(([^)]*)\\\\)/g);\\n\\n  if (!tFuncs) {\\n    return \"\";\\n  }\\n\\n  var tFuncValues = tFuncs.map(function (tFuncStr) {\\n    var _values;\\n\\n    var type = tFuncStr.split(\"(\")[0];\\n\\n    if (!type) {\\n      throw new Error(\"Unable to find transform name\");\\n    }\\n\\n    if (!transformFunctionsArr.includes(type)) {\\n      throw new Error(\"transform function name \\\\\"\".concat(type, \"\\\\\" is not valid\"));\\n    } // get the arg/props of the transform function, e.g \"90deg\".\\n\\n\\n    var tFuncParts = tFuncStr.match(/([-+]?[0-9]*\\\\.?[0-9]+)([a-z])*/g);\\n\\n    if (!tFuncParts) {\\n      return {\\n        type: type,\\n        values: []\\n      };\\n    }\\n\\n    var values = tFuncParts.map(function (a) {\\n      // Separate the arg value and unit. e.g [\"90\", \"deg\"]\\n      var _a$matchAll = a.matchAll(/([-+]?[0-9]*\\\\.?[0-9]+)|([a-z])*/g),\\n          _a$matchAll2 = transform_slicedToArray(_a$matchAll, 2),\\n          value = _a$matchAll2[0],\\n          unit = _a$matchAll2[1];\\n\\n      return {\\n        unit: unit[0] || defaultUnits[type],\\n        value: value[0]\\n      };\\n    }); // Not supporting x, y args of svg rotate transform yet...\\n\\n    if (values && type === \"rotate\" && ((_values = values) === null || _values === void 0 ? void 0 : _values.length) > 1) {\\n      values = [values[0]];\\n    }\\n\\n    return {\\n      type: type,\\n      values: values\\n    };\\n  }); // Generate a string of transform functions that can be set as a CSS Transform.\\n\\n  var csstransformStr = tFuncValues.map(function (_ref) {\\n    var type = _ref.type,\\n        values = _ref.values;\\n    var valStr = values.map(function (_ref2) {\\n      var unit = _ref2.unit,\\n          value = _ref2.value;\\n      return \"\".concat(value).concat(unit);\\n    }).join(\", \");\\n    return \"\".concat(type, \"(\").concat(valStr, \")\");\\n  }).join(\" \");\\n  return csstransformStr;\\n};\\n\\nvar createDOMMatrixFromSVGStr = function createDOMMatrixFromSVGStr(svgTransformStr) {\\n  var cssTransformStr = svgTransformToCSSTransform(svgTransformStr);\\n  return new DOMMatrix(cssTransformStr);\\n};\\nfunction getElementMatrix(el) {\\n  if (el.hasAttribute(\"transform\")) {\\n    var elMat = new DOMMatrix(svgTransformToCSSTransform(el.getAttribute(\"transform\") || \"\"));\\n    return multiply(create(), create(), elMat.toFloat32Array());\\n  }\\n\\n  return create();\\n}\\nfunction getTransformMatrix(el, groups) {\\n  var accumMat = groups.map(function (_ref3) {\\n    var element = _ref3.element;\\n    return getElementMatrix(element);\\n  }).concat([getElementMatrix(el)]).reduce(function (acc, mat) {\\n    return multiply(acc, acc, mat);\\n  }, create());\\n  return accumMat;\\n}\\nfunction transformPoints(points, transform) {\\n  return points.map(function (_ref4) {\\n    var _ref5 = transform_slicedToArray(_ref4, 2),\\n        x = _ref5[0],\\n        y = _ref5[1];\\n\\n    var _vec3$transformMat = transformMat4(vec3_create(), vec3_fromValues(x, y, 1), transform),\\n        _vec3$transformMat2 = transform_slicedToArray(_vec3$transformMat, 2),\\n        newX = _vec3$transformMat2[0],\\n        newY = _vec3$transformMat2[1];\\n\\n    return [newX, newY];\\n  });\\n}\\n;// CONCATENATED MODULE: ./node_modules/points-on-curve/lib/index.js\\n// distance between 2 points\\nfunction lib_distance(p1, p2) {\\n    return Math.sqrt(distanceSq(p1, p2));\\n}\\n// distance between 2 points squared\\nfunction distanceSq(p1, p2) {\\n    return Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2);\\n}\\n// Sistance squared from a point p to the line segment vw\\nfunction distanceToSegmentSq(p, v, w) {\\n    const l2 = distanceSq(v, w);\\n    if (l2 === 0) {\\n        return distanceSq(p, v);\\n    }\\n    let t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\\n    t = Math.max(0, Math.min(1, t));\\n    return distanceSq(p, lib_lerp(v, w, t));\\n}\\nfunction lib_lerp(a, b, t) {\\n    return [\\n        a[0] + (b[0] - a[0]) * t,\\n        a[1] + (b[1] - a[1]) * t,\\n    ];\\n}\\n// Adapted from https://seant23.wordpress.com/2010/11/12/offset-bezier-curves/\\nfunction flatness(points, offset) {\\n    const p1 = points[offset + 0];\\n    const p2 = points[offset + 1];\\n    const p3 = points[offset + 2];\\n    const p4 = points[offset + 3];\\n    let ux = 3 * p2[0] - 2 * p1[0] - p4[0];\\n    ux *= ux;\\n    let uy = 3 * p2[1] - 2 * p1[1] - p4[1];\\n    uy *= uy;\\n    let vx = 3 * p3[0] - 2 * p4[0] - p1[0];\\n    vx *= vx;\\n    let vy = 3 * p3[1] - 2 * p4[1] - p1[1];\\n    vy *= vy;\\n    if (ux < vx) {\\n        ux = vx;\\n    }\\n    if (uy < vy) {\\n        uy = vy;\\n    }\\n    return ux + uy;\\n}\\nfunction getPointsOnBezierCurveWithSplitting(points, offset, tolerance, newPoints) {\\n    const outPoints = newPoints || [];\\n    if (flatness(points, offset) < tolerance) {\\n        const p0 = points[offset + 0];\\n        if (outPoints.length) {\\n            const d = lib_distance(outPoints[outPoints.length - 1], p0);\\n            if (d > 1) {\\n                outPoints.push(p0);\\n            }\\n        }\\n        else {\\n            outPoints.push(p0);\\n        }\\n        outPoints.push(points[offset + 3]);\\n    }\\n    else {\\n        // subdivide\\n        const t = .5;\\n        const p1 = points[offset + 0];\\n        const p2 = points[offset + 1];\\n        const p3 = points[offset + 2];\\n        const p4 = points[offset + 3];\\n        const q1 = lib_lerp(p1, p2, t);\\n        const q2 = lib_lerp(p2, p3, t);\\n        const q3 = lib_lerp(p3, p4, t);\\n        const r1 = lib_lerp(q1, q2, t);\\n        const r2 = lib_lerp(q2, q3, t);\\n        const red = lib_lerp(r1, r2, t);\\n        getPointsOnBezierCurveWithSplitting([p1, q1, r1, red], 0, tolerance, outPoints);\\n        getPointsOnBezierCurveWithSplitting([red, r2, q3, p4], 0, tolerance, outPoints);\\n    }\\n    return outPoints;\\n}\\nfunction simplify(points, distance) {\\n    return simplifyPoints(points, 0, points.length, distance);\\n}\\n// Ramer–Douglas–Peucker algorithm\\n// https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\\nfunction simplifyPoints(points, start, end, epsilon, newPoints) {\\n    const outPoints = newPoints || [];\\n    // find the most distance point from the endpoints\\n    const s = points[start];\\n    const e = points[end - 1];\\n    let maxDistSq = 0;\\n    let maxNdx = 1;\\n    for (let i = start + 1; i < end - 1; ++i) {\\n        const distSq = distanceToSegmentSq(points[i], s, e);\\n        if (distSq > maxDistSq) {\\n            maxDistSq = distSq;\\n            maxNdx = i;\\n        }\\n    }\\n    // if that point is too far, split\\n    if (Math.sqrt(maxDistSq) > epsilon) {\\n        simplifyPoints(points, start, maxNdx + 1, epsilon, outPoints);\\n        simplifyPoints(points, maxNdx, end, epsilon, outPoints);\\n    }\\n    else {\\n        if (!outPoints.length) {\\n            outPoints.push(s);\\n        }\\n        outPoints.push(e);\\n    }\\n    return outPoints;\\n}\\nfunction pointsOnBezierCurves(points, tolerance = 0.15, distance) {\\n    const newPoints = [];\\n    const numSegments = (points.length - 1) / 3;\\n    for (let i = 0; i < numSegments; i++) {\\n        const offset = i * 3;\\n        getPointsOnBezierCurveWithSplitting(points, offset, tolerance, newPoints);\\n    }\\n    if (distance && distance > 0) {\\n        return simplifyPoints(newPoints, 0, newPoints.length, distance);\\n    }\\n    return newPoints;\\n}\\n\\n;// CONCATENATED MODULE: ./node_modules/path-data-parser/lib/parser.js\\nconst COMMAND = 0;\\nconst NUMBER = 1;\\nconst EOD = 2;\\nconst PARAMS = { A: 7, a: 7, C: 6, c: 6, H: 1, h: 1, L: 2, l: 2, M: 2, m: 2, Q: 4, q: 4, S: 4, s: 4, T: 2, t: 2, V: 1, v: 1, Z: 0, z: 0 };\\nfunction tokenize(d) {\\n    const tokens = new Array();\\n    while (d !== \\'\\') {\\n        if (d.match(/^([ \\\\t\\\\r\\\\n,]+)/)) {\\n            d = d.substr(RegExp.$1.length);\\n        }\\n        else if (d.match(/^([aAcChHlLmMqQsStTvVzZ])/)) {\\n            tokens[tokens.length] = { type: COMMAND, text: RegExp.$1 };\\n            d = d.substr(RegExp.$1.length);\\n        }\\n        else if (d.match(/^(([-+]?[0-9]+(\\\\.[0-9]*)?|[-+]?\\\\.[0-9]+)([eE][-+]?[0-9]+)?)/)) {\\n            tokens[tokens.length] = { type: NUMBER, text: `${parseFloat(RegExp.$1)}` };\\n            d = d.substr(RegExp.$1.length);\\n        }\\n        else {\\n            return [];\\n        }\\n    }\\n    tokens[tokens.length] = { type: EOD, text: \\'\\' };\\n    return tokens;\\n}\\nfunction isType(token, type) {\\n    return token.type === type;\\n}\\nfunction parsePath(d) {\\n    const segments = [];\\n    const tokens = tokenize(d);\\n    let mode = \\'BOD\\';\\n    let index = 0;\\n    let token = tokens[index];\\n    while (!isType(token, EOD)) {\\n        let paramsCount = 0;\\n        const params = [];\\n        if (mode === \\'BOD\\') {\\n            if (token.text === \\'M\\' || token.text === \\'m\\') {\\n                index++;\\n                paramsCount = PARAMS[token.text];\\n                mode = token.text;\\n            }\\n            else {\\n                return parsePath(\\'M0,0\\' + d);\\n            }\\n        }\\n        else if (isType(token, NUMBER)) {\\n            paramsCount = PARAMS[mode];\\n        }\\n        else {\\n            index++;\\n            paramsCount = PARAMS[token.text];\\n            mode = token.text;\\n        }\\n        if ((index + paramsCount) < tokens.length) {\\n            for (let i = index; i < index + paramsCount; i++) {\\n                const numbeToken = tokens[i];\\n                if (isType(numbeToken, NUMBER)) {\\n                    params[params.length] = +numbeToken.text;\\n                }\\n                else {\\n                    throw new Error(\\'Param not a number: \\' + mode + \\',\\' + numbeToken.text);\\n                }\\n            }\\n            if (typeof PARAMS[mode] === \\'number\\') {\\n                const segment = { key: mode, data: params };\\n                segments.push(segment);\\n                index += paramsCount;\\n                token = tokens[index];\\n                if (mode === \\'M\\')\\n                    mode = \\'L\\';\\n                if (mode === \\'m\\')\\n                    mode = \\'l\\';\\n            }\\n            else {\\n                throw new Error(\\'Bad segment: \\' + mode);\\n            }\\n        }\\n        else {\\n            throw new Error(\\'Path data ended short\\');\\n        }\\n    }\\n    return segments;\\n}\\nfunction serialize(segments) {\\n    const tokens = [];\\n    for (const { key, data } of segments) {\\n        tokens.push(key);\\n        switch (key) {\\n            case \\'C\\':\\n            case \\'c\\':\\n                tokens.push(data[0], `${data[1]},`, data[2], `${data[3]},`, data[4], data[5]);\\n                break;\\n            case \\'S\\':\\n            case \\'s\\':\\n            case \\'Q\\':\\n            case \\'q\\':\\n                tokens.push(data[0], `${data[1]},`, data[2], data[3]);\\n                break;\\n            default:\\n                tokens.push(...data);\\n                break;\\n        }\\n    }\\n    return tokens.join(\\' \\');\\n}\\n\\n;// CONCATENATED MODULE: ./node_modules/path-data-parser/lib/absolutize.js\\n// Translate relative commands to absolute commands\\nfunction absolutize(segments) {\\n    let cx = 0, cy = 0;\\n    let subx = 0, suby = 0;\\n    const out = [];\\n    for (const { key, data } of segments) {\\n        switch (key) {\\n            case \\'M\\':\\n                out.push({ key: \\'M\\', data: [...data] });\\n                [cx, cy] = data;\\n                [subx, suby] = data;\\n                break;\\n            case \\'m\\':\\n                cx += data[0];\\n                cy += data[1];\\n                out.push({ key: \\'M\\', data: [cx, cy] });\\n                subx = cx;\\n                suby = cy;\\n                break;\\n            case \\'L\\':\\n                out.push({ key: \\'L\\', data: [...data] });\\n                [cx, cy] = data;\\n                break;\\n            case \\'l\\':\\n                cx += data[0];\\n                cy += data[1];\\n                out.push({ key: \\'L\\', data: [cx, cy] });\\n                break;\\n            case \\'C\\':\\n                out.push({ key: \\'C\\', data: [...data] });\\n                cx = data[4];\\n                cy = data[5];\\n                break;\\n            case \\'c\\': {\\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\\n                out.push({ key: \\'C\\', data: newdata });\\n                cx = newdata[4];\\n                cy = newdata[5];\\n                break;\\n            }\\n            case \\'Q\\':\\n                out.push({ key: \\'Q\\', data: [...data] });\\n                cx = data[2];\\n                cy = data[3];\\n                break;\\n            case \\'q\\': {\\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\\n                out.push({ key: \\'Q\\', data: newdata });\\n                cx = newdata[2];\\n                cy = newdata[3];\\n                break;\\n            }\\n            case \\'A\\':\\n                out.push({ key: \\'A\\', data: [...data] });\\n                cx = data[5];\\n                cy = data[6];\\n                break;\\n            case \\'a\\':\\n                cx += data[5];\\n                cy += data[6];\\n                out.push({ key: \\'A\\', data: [data[0], data[1], data[2], data[3], data[4], cx, cy] });\\n                break;\\n            case \\'H\\':\\n                out.push({ key: \\'H\\', data: [...data] });\\n                cx = data[0];\\n                break;\\n            case \\'h\\':\\n                cx += data[0];\\n                out.push({ key: \\'H\\', data: [cx] });\\n                break;\\n            case \\'V\\':\\n                out.push({ key: \\'V\\', data: [...data] });\\n                cy = data[0];\\n                break;\\n            case \\'v\\':\\n                cy += data[0];\\n                out.push({ key: \\'V\\', data: [cy] });\\n                break;\\n            case \\'S\\':\\n                out.push({ key: \\'S\\', data: [...data] });\\n                cx = data[2];\\n                cy = data[3];\\n                break;\\n            case \\'s\\': {\\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\\n                out.push({ key: \\'S\\', data: newdata });\\n                cx = newdata[2];\\n                cy = newdata[3];\\n                break;\\n            }\\n            case \\'T\\':\\n                out.push({ key: \\'T\\', data: [...data] });\\n                cx = data[0];\\n                cy = data[1];\\n                break;\\n            case \\'t\\':\\n                cx += data[0];\\n                cy += data[1];\\n                out.push({ key: \\'T\\', data: [cx, cy] });\\n                break;\\n            case \\'Z\\':\\n            case \\'z\\':\\n                out.push({ key: \\'Z\\', data: [] });\\n                cx = subx;\\n                cy = suby;\\n                break;\\n        }\\n    }\\n    return out;\\n}\\n\\n;// CONCATENATED MODULE: ./node_modules/path-data-parser/lib/normalize.js\\n// Normalize path to include only M, L, C, and Z commands\\nfunction normalize_normalize(segments) {\\n    const out = [];\\n    let lastType = \\'\\';\\n    let cx = 0, cy = 0;\\n    let subx = 0, suby = 0;\\n    let lcx = 0, lcy = 0;\\n    for (const { key, data } of segments) {\\n        switch (key) {\\n            case \\'M\\':\\n                out.push({ key: \\'M\\', data: [...data] });\\n                [cx, cy] = data;\\n                [subx, suby] = data;\\n                break;\\n            case \\'C\\':\\n                out.push({ key: \\'C\\', data: [...data] });\\n                cx = data[4];\\n                cy = data[5];\\n                lcx = data[2];\\n                lcy = data[3];\\n                break;\\n            case \\'L\\':\\n                out.push({ key: \\'L\\', data: [...data] });\\n                [cx, cy] = data;\\n                break;\\n            case \\'H\\':\\n                cx = data[0];\\n                out.push({ key: \\'L\\', data: [cx, cy] });\\n                break;\\n            case \\'V\\':\\n                cy = data[0];\\n                out.push({ key: \\'L\\', data: [cx, cy] });\\n                break;\\n            case \\'S\\': {\\n                let cx1 = 0, cy1 = 0;\\n                if (lastType === \\'C\\' || lastType === \\'S\\') {\\n                    cx1 = cx + (cx - lcx);\\n                    cy1 = cy + (cy - lcy);\\n                }\\n                else {\\n                    cx1 = cx;\\n                    cy1 = cy;\\n                }\\n                out.push({ key: \\'C\\', data: [cx1, cy1, ...data] });\\n                lcx = data[0];\\n                lcy = data[1];\\n                cx = data[2];\\n                cy = data[3];\\n                break;\\n            }\\n            case \\'T\\': {\\n                const [x, y] = data;\\n                let x1 = 0, y1 = 0;\\n                if (lastType === \\'Q\\' || lastType === \\'T\\') {\\n                    x1 = cx + (cx - lcx);\\n                    y1 = cy + (cy - lcy);\\n                }\\n                else {\\n                    x1 = cx;\\n                    y1 = cy;\\n                }\\n                const cx1 = cx + 2 * (x1 - cx) / 3;\\n                const cy1 = cy + 2 * (y1 - cy) / 3;\\n                const cx2 = x + 2 * (x1 - x) / 3;\\n                const cy2 = y + 2 * (y1 - y) / 3;\\n                out.push({ key: \\'C\\', data: [cx1, cy1, cx2, cy2, x, y] });\\n                lcx = x1;\\n                lcy = y1;\\n                cx = x;\\n                cy = y;\\n                break;\\n            }\\n            case \\'Q\\': {\\n                const [x1, y1, x, y] = data;\\n                const cx1 = cx + 2 * (x1 - cx) / 3;\\n                const cy1 = cy + 2 * (y1 - cy) / 3;\\n                const cx2 = x + 2 * (x1 - x) / 3;\\n                const cy2 = y + 2 * (y1 - y) / 3;\\n                out.push({ key: \\'C\\', data: [cx1, cy1, cx2, cy2, x, y] });\\n                lcx = x1;\\n                lcy = y1;\\n                cx = x;\\n                cy = y;\\n                break;\\n            }\\n            case \\'A\\': {\\n                const r1 = Math.abs(data[0]);\\n                const r2 = Math.abs(data[1]);\\n                const angle = data[2];\\n                const largeArcFlag = data[3];\\n                const sweepFlag = data[4];\\n                const x = data[5];\\n                const y = data[6];\\n                if (r1 === 0 || r2 === 0) {\\n                    out.push({ key: \\'C\\', data: [cx, cy, x, y, x, y] });\\n                    cx = x;\\n                    cy = y;\\n                }\\n                else {\\n                    if (cx !== x || cy !== y) {\\n                        const curves = arcToCubicCurves(cx, cy, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\\n                        curves.forEach(function (curve) {\\n                            out.push({ key: \\'C\\', data: curve });\\n                        });\\n                        cx = x;\\n                        cy = y;\\n                    }\\n                }\\n                break;\\n            }\\n            case \\'Z\\':\\n                out.push({ key: \\'Z\\', data: [] });\\n                cx = subx;\\n                cy = suby;\\n                break;\\n        }\\n        lastType = key;\\n    }\\n    return out;\\n}\\nfunction degToRad(degrees) {\\n    return (Math.PI * degrees) / 180;\\n}\\nfunction normalize_rotate(x, y, angleRad) {\\n    const X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\\n    const Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\\n    return [X, Y];\\n}\\nfunction arcToCubicCurves(x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, recursive) {\\n    const angleRad = degToRad(angle);\\n    let params = [];\\n    let f1 = 0, f2 = 0, cx = 0, cy = 0;\\n    if (recursive) {\\n        [f1, f2, cx, cy] = recursive;\\n    }\\n    else {\\n        [x1, y1] = normalize_rotate(x1, y1, -angleRad);\\n        [x2, y2] = normalize_rotate(x2, y2, -angleRad);\\n        const x = (x1 - x2) / 2;\\n        const y = (y1 - y2) / 2;\\n        let h = (x * x) / (r1 * r1) + (y * y) / (r2 * r2);\\n        if (h > 1) {\\n            h = Math.sqrt(h);\\n            r1 = h * r1;\\n            r2 = h * r2;\\n        }\\n        const sign = (largeArcFlag === sweepFlag) ? -1 : 1;\\n        const r1Pow = r1 * r1;\\n        const r2Pow = r2 * r2;\\n        const left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\\n        const right = r1Pow * y * y + r2Pow * x * x;\\n        const k = sign * Math.sqrt(Math.abs(left / right));\\n        cx = k * r1 * y / r2 + (x1 + x2) / 2;\\n        cy = k * -r2 * x / r1 + (y1 + y2) / 2;\\n        f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\\n        f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\\n        if (x1 < cx) {\\n            f1 = Math.PI - f1;\\n        }\\n        if (x2 < cx) {\\n            f2 = Math.PI - f2;\\n        }\\n        if (f1 < 0) {\\n            f1 = Math.PI * 2 + f1;\\n        }\\n        if (f2 < 0) {\\n            f2 = Math.PI * 2 + f2;\\n        }\\n        if (sweepFlag && f1 > f2) {\\n            f1 = f1 - Math.PI * 2;\\n        }\\n        if (!sweepFlag && f2 > f1) {\\n            f2 = f2 - Math.PI * 2;\\n        }\\n    }\\n    let df = f2 - f1;\\n    if (Math.abs(df) > (Math.PI * 120 / 180)) {\\n        const f2old = f2;\\n        const x2old = x2;\\n        const y2old = y2;\\n        if (sweepFlag && f2 > f1) {\\n            f2 = f1 + (Math.PI * 120 / 180) * (1);\\n        }\\n        else {\\n            f2 = f1 + (Math.PI * 120 / 180) * (-1);\\n        }\\n        x2 = cx + r1 * Math.cos(f2);\\n        y2 = cy + r2 * Math.sin(f2);\\n        params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\\n    }\\n    df = f2 - f1;\\n    const c1 = Math.cos(f1);\\n    const s1 = Math.sin(f1);\\n    const c2 = Math.cos(f2);\\n    const s2 = Math.sin(f2);\\n    const t = Math.tan(df / 4);\\n    const hx = 4 / 3 * r1 * t;\\n    const hy = 4 / 3 * r2 * t;\\n    const m1 = [x1, y1];\\n    const m2 = [x1 + hx * s1, y1 - hy * c1];\\n    const m3 = [x2 + hx * s2, y2 - hy * c2];\\n    const m4 = [x2, y2];\\n    m2[0] = 2 * m1[0] - m2[0];\\n    m2[1] = 2 * m1[1] - m2[1];\\n    if (recursive) {\\n        return [m2, m3, m4].concat(params);\\n    }\\n    else {\\n        params = [m2, m3, m4].concat(params);\\n        const curves = [];\\n        for (let i = 0; i < params.length; i += 3) {\\n            const r1 = normalize_rotate(params[i][0], params[i][1], angleRad);\\n            const r2 = normalize_rotate(params[i + 1][0], params[i + 1][1], angleRad);\\n            const r3 = normalize_rotate(params[i + 2][0], params[i + 2][1], angleRad);\\n            curves.push([r1[0], r1[1], r2[0], r2[1], r3[0], r3[1]]);\\n        }\\n        return curves;\\n    }\\n}\\n\\n;// CONCATENATED MODULE: ./node_modules/path-data-parser/lib/index.js\\n\\n\\n\\n\\n;// CONCATENATED MODULE: ./node_modules/points-on-path/lib/index.js\\n\\n\\nfunction pointsOnPath(path, tolerance, distance) {\\n    const segments = parsePath(path);\\n    const normalized = normalize_normalize(absolutize(segments));\\n    const sets = [];\\n    let currentPoints = [];\\n    let start = [0, 0];\\n    let pendingCurve = [];\\n    const appendPendingCurve = () => {\\n        if (pendingCurve.length >= 4) {\\n            currentPoints.push(...pointsOnBezierCurves(pendingCurve, tolerance));\\n        }\\n        pendingCurve = [];\\n    };\\n    const appendPendingPoints = () => {\\n        appendPendingCurve();\\n        if (currentPoints.length) {\\n            sets.push(currentPoints);\\n            currentPoints = [];\\n        }\\n    };\\n    for (const { key, data } of normalized) {\\n        switch (key) {\\n            case \\'M\\':\\n                appendPendingPoints();\\n                start = [data[0], data[1]];\\n                currentPoints.push(start);\\n                break;\\n            case \\'L\\':\\n                appendPendingCurve();\\n                currentPoints.push([data[0], data[1]]);\\n                break;\\n            case \\'C\\':\\n                if (!pendingCurve.length) {\\n                    const lastPoint = currentPoints.length ? currentPoints[currentPoints.length - 1] : start;\\n                    pendingCurve.push([lastPoint[0], lastPoint[1]]);\\n                }\\n                pendingCurve.push([data[0], data[1]]);\\n                pendingCurve.push([data[2], data[3]]);\\n                pendingCurve.push([data[4], data[5]]);\\n                break;\\n            case \\'Z\\':\\n                appendPendingCurve();\\n                currentPoints.push([start[0], start[1]]);\\n                break;\\n        }\\n    }\\n    appendPendingPoints();\\n    if (!distance) {\\n        return sets;\\n    }\\n    const out = [];\\n    for (const set of sets) {\\n        const simplifiedSet = simplify(set, distance);\\n        if (simplifiedSet.length) {\\n            out.push(simplifiedSet);\\n        }\\n    }\\n    return out;\\n}\\n\\n;// CONCATENATED MODULE: ./src/walker.ts\\nfunction walker_slicedToArray(arr, i) { return walker_arrayWithHoles(arr) || walker_iterableToArrayLimit(arr, i) || walker_unsupportedIterableToArray(arr, i) || walker_nonIterableRest(); }\\n\\nfunction walker_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction walker_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction walker_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction walker_toConsumableArray(arr) { return walker_arrayWithoutHoles(arr) || walker_iterableToArray(arr) || walker_unsupportedIterableToArray(arr) || walker_nonIterableSpread(); }\\n\\nfunction walker_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction walker_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return walker_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return walker_arrayLikeToArray(o, minLen); }\\n\\nfunction walker_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\\n\\nfunction walker_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return walker_arrayLikeToArray(arr); }\\n\\nfunction walker_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction walker_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction walker_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { walker_ownKeys(Object(source), true).forEach(function (key) { walker_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { walker_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction walker_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar SUPPORTED_TAGS = [\"svg\", \"path\", \"g\", \"use\", \"circle\", \"ellipse\", \"rect\", \"polyline\", \"polygon\"];\\n\\nvar nodeValidator = function nodeValidator(node) {\\n  if (SUPPORTED_TAGS.includes(node.tagName)) {\\n    return NodeFilter.FILTER_ACCEPT;\\n  }\\n\\n  return NodeFilter.FILTER_REJECT;\\n};\\n\\nfunction createTreeWalker(dom) {\\n  return document.createTreeWalker(dom, NodeFilter.SHOW_ALL, {\\n    acceptNode: nodeValidator\\n  });\\n}\\n\\nvar walker_presAttrs = function presAttrs(el, groups) {\\n  return walker_objectSpread(walker_objectSpread(walker_objectSpread({}, getGroupAttrs(groups)), presAttrsToElementValues(el)), filterAttrsToElementValues(el));\\n};\\n\\nvar skippedUseAttrs = [\"id\"];\\nvar allwaysPassedUseAttrs = [\"x\", \"y\", \"width\", \"height\", \"href\", \"xlink:href\"];\\n/*\\n  \"Most attributes on use do not override those already on the element\\n  referenced by use. (This differs from how CSS style attributes override\\n  those set \\'earlier\\' in the cascade). Only the attributes x, y, width,\\n  height and href on the use element will override those set on the\\n  referenced element. However, any other attributes not set on the referenced\\n  element will be applied to the use element.\"\\n\\n  Situation 1: Attr is set on defEl, NOT on useEl\\n    - result: use defEl attr\\n  Situation 2: Attr is on useEl, NOT on defEl\\n    - result: use the useEl attr\\n  Situation 3: Attr is on both useEl and defEl\\n    - result: use the defEl attr (Unless x, y, width, height, href, xlink:href)\\n*/\\n\\nvar getDefElWithCorrectAttrs = function getDefElWithCorrectAttrs(defEl, useEl) {\\n  var finalEl = walker_toConsumableArray(useEl.attributes).reduce(function (el, attr) {\\n    if (skippedUseAttrs.includes(attr.value)) {\\n      return el;\\n    } // Does defEl have the attr? If so, use it, else use the useEl attr\\n\\n\\n    if (!defEl.hasAttribute(attr.name) || allwaysPassedUseAttrs.includes(attr.name)) {\\n      el.setAttribute(attr.name, useEl.getAttribute(attr.name) || \"\");\\n    }\\n\\n    return el;\\n  }, defEl.cloneNode());\\n\\n  return finalEl;\\n};\\n\\nvar walkers = {\\n  svg: function svg(args) {\\n    walk(args, args.tw.nextNode());\\n  },\\n  g: function g(args) {\\n    var nextArgs = walker_objectSpread(walker_objectSpread({}, args), {}, {\\n      tw: createTreeWalker(args.tw.currentNode),\\n      groups: [].concat(walker_toConsumableArray(args.groups), [new elements_Group(args.tw.currentNode)])\\n    });\\n\\n    walk(nextArgs, nextArgs.tw.nextNode());\\n    walk(args, args.tw.nextSibling());\\n  },\\n  use: function use(args) {\\n    var root = args.root,\\n        tw = args.tw,\\n        scene = args.scene;\\n    var useEl = tw.currentNode;\\n    var id = useEl.getAttribute(\"href\") || useEl.getAttribute(\"xlink:href\");\\n\\n    if (!id) {\\n      throw new Error(\"unable to get id of use element\");\\n    }\\n\\n    var defEl = root.querySelector(id);\\n\\n    if (!defEl) {\\n      throw new Error(\"unable to find def element with id: \".concat(id));\\n    }\\n\\n    var tempScene = new elements_ExcalidrawScene();\\n    var finalEl = getDefElWithCorrectAttrs(defEl, useEl);\\n    walk(walker_objectSpread(walker_objectSpread({}, args), {}, {\\n      scene: tempScene,\\n      tw: createTreeWalker(finalEl)\\n    }), finalEl);\\n    var exEl = tempScene.elements.pop();\\n\\n    if (!exEl) {\\n      throw new Error(\"Unable to create ex element\");\\n    }\\n\\n    scene.elements.push(exEl);\\n    walk(args, args.tw.nextNode());\\n  },\\n  circle: function circle(args) {\\n    var tw = args.tw,\\n        scene = args.scene,\\n        groups = args.groups;\\n    var el = tw.currentNode;\\n    var r = getNum(el, \"r\", 0);\\n    var d = r * 2;\\n    var x = getNum(el, \"x\", 0) + getNum(el, \"cx\", 0) - r;\\n    var y = getNum(el, \"y\", 0) + getNum(el, \"cy\", 0) - r;\\n    var mat = getTransformMatrix(el, groups); // @ts-ignore\\n\\n    var m = fromValues(d, 0, 0, 0, 0, d, 0, 0, 0, 0, 1, 0, x, y, 0, 1);\\n    var result = multiply(create(), mat, m);\\n\\n    var circle = walker_objectSpread(walker_objectSpread(walker_objectSpread({}, createExEllipse()), walker_presAttrs(el, groups)), {}, {\\n      x: result[12],\\n      y: result[13],\\n      width: result[0],\\n      height: result[5],\\n      groupIds: groups.map(function (g) {\\n        return g.id;\\n      })\\n    });\\n\\n    scene.elements.push(circle);\\n    walk(args, tw.nextNode());\\n  },\\n  ellipse: function ellipse(args) {\\n    var tw = args.tw,\\n        scene = args.scene,\\n        groups = args.groups;\\n    var el = tw.currentNode;\\n    var rx = getNum(el, \"rx\", 0);\\n    var ry = getNum(el, \"ry\", 0);\\n    var cx = getNum(el, \"cx\", 0);\\n    var cy = getNum(el, \"cy\", 0);\\n    var x = getNum(el, \"x\", 0) + cx - rx;\\n    var y = getNum(el, \"y\", 0) + cy - ry;\\n    var w = rx * 2;\\n    var h = ry * 2;\\n    var mat = getTransformMatrix(el, groups);\\n    var m = fromValues(w, 0, 0, 0, 0, h, 0, 0, 0, 0, 1, 0, x, y, 0, 1);\\n    var result = multiply(create(), mat, m);\\n\\n    var ellipse = walker_objectSpread(walker_objectSpread(walker_objectSpread({}, createExEllipse()), walker_presAttrs(el, groups)), {}, {\\n      x: result[12],\\n      y: result[13],\\n      width: result[0],\\n      height: result[5],\\n      groupIds: groups.map(function (g) {\\n        return g.id;\\n      })\\n    });\\n\\n    scene.elements.push(ellipse);\\n    walk(args, tw.nextNode());\\n  },\\n  line: function line(args) {\\n    // unimplemented\\n    walk(args, args.tw.nextNode());\\n  },\\n  polygon: function polygon(args) {\\n    var tw = args.tw,\\n        scene = args.scene,\\n        groups = args.groups;\\n    var el = tw.currentNode;\\n    var points = pointsAttrToPoints(el);\\n    var mat = getTransformMatrix(el, groups);\\n    var transformedPoints = transformPoints(points, mat); // The first point needs to be 0, 0, and all following points\\n    // are relative to the first point.\\n\\n    var x = transformedPoints[0][0];\\n    var y = transformedPoints[0][1];\\n    var relativePoints = transformedPoints.map(function (_ref) {\\n      var _ref2 = walker_slicedToArray(_ref, 2),\\n          _x = _ref2[0],\\n          _y = _ref2[1];\\n\\n      return [_x - x, _y - y];\\n    });\\n\\n    var _dimensionsFromPoints = dimensionsFromPoints(relativePoints),\\n        _dimensionsFromPoints2 = walker_slicedToArray(_dimensionsFromPoints, 2),\\n        width = _dimensionsFromPoints2[0],\\n        height = _dimensionsFromPoints2[1];\\n\\n    var line = walker_objectSpread(walker_objectSpread(walker_objectSpread(walker_objectSpread({}, createExLine()), getGroupAttrs(groups)), presAttrsToElementValues(el)), {}, {\\n      points: relativePoints.concat([[0, 0]]),\\n      x: x,\\n      y: y,\\n      width: width,\\n      height: height\\n    });\\n\\n    scene.elements.push(line);\\n    walk(args, args.tw.nextNode());\\n  },\\n  polyline: function polyline(args) {\\n    var tw = args.tw,\\n        scene = args.scene,\\n        groups = args.groups;\\n    var el = tw.currentNode;\\n    var mat = getTransformMatrix(el, groups);\\n    var points = pointsAttrToPoints(el);\\n    var transformedPoints = transformPoints(points, mat); // The first point needs to be 0, 0, and all following points\\n    // are relative to the first point.\\n\\n    var x = transformedPoints[0][0];\\n    var y = transformedPoints[0][1];\\n    var relativePoints = transformedPoints.map(function (_ref3) {\\n      var _ref4 = walker_slicedToArray(_ref3, 2),\\n          _x = _ref4[0],\\n          _y = _ref4[1];\\n\\n      return [_x - x, _y - y];\\n    });\\n\\n    var _dimensionsFromPoints3 = dimensionsFromPoints(relativePoints),\\n        _dimensionsFromPoints4 = walker_slicedToArray(_dimensionsFromPoints3, 2),\\n        width = _dimensionsFromPoints4[0],\\n        height = _dimensionsFromPoints4[1];\\n\\n    var hasFill = has(el, \"fill\");\\n    var fill = get(el, \"fill\");\\n    var shouldFill = !hasFill || hasFill && fill !== \"none\";\\n\\n    var line = walker_objectSpread(walker_objectSpread(walker_objectSpread(walker_objectSpread({}, createExLine()), getGroupAttrs(groups)), presAttrsToElementValues(el)), {}, {\\n      points: relativePoints.concat(shouldFill ? [[0, 0]] : []),\\n      x: x,\\n      y: y,\\n      width: width,\\n      height: height\\n    });\\n\\n    scene.elements.push(line);\\n    walk(args, args.tw.nextNode());\\n  },\\n  rect: function rect(args) {\\n    var tw = args.tw,\\n        scene = args.scene,\\n        groups = args.groups;\\n    var el = tw.currentNode;\\n    var x = getNum(el, \"x\", 0);\\n    var y = getNum(el, \"y\", 0);\\n    var w = getNum(el, \"width\", 0);\\n    var h = getNum(el, \"height\", 0);\\n    var mat = getTransformMatrix(el, groups); // @ts-ignore\\n\\n    var m = fromValues(w, 0, 0, 0, 0, h, 0, 0, 0, 0, 1, 0, x, y, 0, 1);\\n    var result = multiply(create(), mat, m);\\n    /*\\n    NOTE: Currently there doesn\\'t seem to be a way to specify the border\\n          radius of a rect within Excalidraw. This means that attributes\\n          rx and ry can\\'t be used.\\n    */\\n\\n    var isRound = el.hasAttribute(\"rx\") || el.hasAttribute(\"ry\");\\n\\n    var rect = walker_objectSpread(walker_objectSpread(walker_objectSpread({}, createExRect()), walker_presAttrs(el, groups)), {}, {\\n      x: result[12],\\n      y: result[13],\\n      width: result[0],\\n      height: result[5],\\n      strokeSharpness: isRound ? \"round\" : \"sharp\"\\n    });\\n\\n    scene.elements.push(rect);\\n    walk(args, args.tw.nextNode());\\n  },\\n  path: function path(args) {\\n    var tw = args.tw,\\n        scene = args.scene,\\n        groups = args.groups;\\n    var el = tw.currentNode;\\n    var mat = getTransformMatrix(el, groups);\\n    var points = pointsOnPath(get(el, \"d\"));\\n    var fillColor = get(el, \"fill\", \"black\");\\n    var fillRule = get(el, \"fill-rule\", \"nonzero\");\\n    var elements = [];\\n    var localGroup = randomId();\\n\\n    switch (fillRule) {\\n      case \"nonzero\":\\n        var initialWindingOrder = \"clockwise\";\\n        elements = points.map(function (pointArr, idx) {\\n          var tPoints = transformPoints(pointArr, clone(mat));\\n          var x = tPoints[0][0];\\n          var y = tPoints[0][1];\\n\\n          var _dimensionsFromPoints5 = dimensionsFromPoints(tPoints),\\n              _dimensionsFromPoints6 = walker_slicedToArray(_dimensionsFromPoints5, 2),\\n              width = _dimensionsFromPoints6[0],\\n              height = _dimensionsFromPoints6[1];\\n\\n          var relativePoints = tPoints.map(function (_ref5) {\\n            var _ref6 = walker_slicedToArray(_ref5, 2),\\n                _x = _ref6[0],\\n                _y = _ref6[1];\\n\\n            return [_x - x, _y - y];\\n          });\\n          var windingOrder = getWindingOrder(relativePoints);\\n\\n          if (idx === 0) {\\n            initialWindingOrder = windingOrder;\\n            localGroup = randomId();\\n          }\\n\\n          var backgroundColor = fillColor;\\n\\n          if (initialWindingOrder !== windingOrder) {\\n            backgroundColor = \"#FFFFFF\";\\n          }\\n\\n          return walker_objectSpread(walker_objectSpread(walker_objectSpread({}, createExDraw()), {}, {\\n            strokeWidth: 0,\\n            strokeColor: \"#00000000\"\\n          }, walker_presAttrs(el, groups)), {}, {\\n            points: relativePoints,\\n            backgroundColor: backgroundColor,\\n            width: width,\\n            height: height,\\n            x: x + getNum(el, \"x\", 0),\\n            y: y + getNum(el, \"y\", 0),\\n            groupIds: [localGroup]\\n          });\\n        });\\n        break;\\n\\n      case \"evenodd\":\\n        elements = points.map(function (pointArr, idx) {\\n          var tPoints = transformPoints(pointArr, clone(mat));\\n          var x = tPoints[0][0];\\n          var y = tPoints[0][1];\\n\\n          var _dimensionsFromPoints7 = dimensionsFromPoints(tPoints),\\n              _dimensionsFromPoints8 = walker_slicedToArray(_dimensionsFromPoints7, 2),\\n              width = _dimensionsFromPoints8[0],\\n              height = _dimensionsFromPoints8[1];\\n\\n          var relativePoints = tPoints.map(function (_ref7) {\\n            var _ref8 = walker_slicedToArray(_ref7, 2),\\n                _x = _ref8[0],\\n                _y = _ref8[1];\\n\\n            return [_x - x, _y - y];\\n          });\\n\\n          if (idx === 0) {\\n            localGroup = randomId();\\n          }\\n\\n          return walker_objectSpread(walker_objectSpread(walker_objectSpread({}, createExDraw()), walker_presAttrs(el, groups)), {}, {\\n            points: relativePoints,\\n            width: width,\\n            height: height,\\n            x: x + getNum(el, \"x\", 0),\\n            y: y + getNum(el, \"y\", 0)\\n          });\\n        });\\n        break;\\n\\n      default:\\n    }\\n\\n    scene.elements = scene.elements.concat(elements);\\n    walk(args, tw.nextNode());\\n  }\\n};\\nfunction walk(args, nextNode) {\\n  if (!nextNode) {\\n    return;\\n  }\\n\\n  var nodeName = nextNode.nodeName;\\n\\n  if (walkers[nodeName]) {\\n    walkers[nodeName](args);\\n  }\\n}\\n;// CONCATENATED MODULE: ./src/parser.ts\\nfunction parser_toConsumableArray(arr) { return parser_arrayWithoutHoles(arr) || parser_iterableToArray(arr) || parser_unsupportedIterableToArray(arr) || parser_nonIterableSpread(); }\\n\\nfunction parser_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\\n\\nfunction parser_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return parser_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return parser_arrayLikeToArray(o, minLen); }\\n\\nfunction parser_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\\n\\nfunction parser_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return parser_arrayLikeToArray(arr); }\\n\\nfunction parser_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\n\\n\\nvar convert = function convert(svgString) {\\n  var parser = new DOMParser();\\n  var svgDOM = parser.parseFromString(svgString, \"image/svg+xml\"); // was there a parsing error?\\n\\n  var errorsElements = svgDOM.querySelectorAll(\"parsererror\");\\n  var hasErrors = errorsElements.length > 0;\\n  var content = null;\\n\\n  if (hasErrors) {\\n    console.error(\"There were errors while parsing the given SVG: \", parser_toConsumableArray(errorsElements).map(function (el) {\\n      return el.innerHTML;\\n    }));\\n  } else {\\n    var tw = createTreeWalker(svgDOM);\\n    var scene = new elements_ExcalidrawScene();\\n    var groups = [];\\n    walk({\\n      tw: tw,\\n      scene: scene,\\n      groups: groups,\\n      root: svgDOM\\n    }, tw.nextNode());\\n    content = scene.toExJSON();\\n  }\\n\\n  return {\\n    hasErrors: hasErrors,\\n    errors: hasErrors ? errorsElements : null,\\n    content: content\\n  };\\n};\\n;// CONCATENATED MODULE: ./src/index.ts\\n\\n/* harmony default export */ const src = (src_parser_namespaceObject);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///773\\n')},792:function(module){eval(\"/**\\n * chroma.js - JavaScript library for color conversions\\n *\\n * Copyright (c) 2011-2019, Gregor Aisch\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * 1. Redistributions of source code must retain the above copyright notice, this\\n * list of conditions and the following disclaimer.\\n *\\n * 2. Redistributions in binary form must reproduce the above copyright notice,\\n * this list of conditions and the following disclaimer in the documentation\\n * and/or other materials provided with the distribution.\\n *\\n * 3. The name Gregor Aisch may not be used to endorse or promote products\\n * derived from this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n *\\n * -------------------------------------------------------\\n *\\n * chroma.js includes colors from colorbrewer2.org, which are released under\\n * the following license:\\n *\\n * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,\\n * and The Pennsylvania State University.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\\n * either express or implied. See the License for the specific\\n * language governing permissions and limitations under the License.\\n *\\n * ------------------------------------------------------\\n *\\n * Named colors are taken from X11 Color Names.\\n * http://www.w3.org/TR/css3-color/#svg-color\\n *\\n * @preserve\\n */\\n\\n(function (global, factory) {\\n     true ? module.exports = factory() :\\n    0;\\n}(this, (function () { 'use strict';\\n\\n    var limit = function (x, min, max) {\\n        if ( min === void 0 ) min=0;\\n        if ( max === void 0 ) max=1;\\n\\n        return x < min ? min : x > max ? max : x;\\n    };\\n\\n    var clip_rgb = function (rgb) {\\n        rgb._clipped = false;\\n        rgb._unclipped = rgb.slice(0);\\n        for (var i=0; i<=3; i++) {\\n            if (i < 3) {\\n                if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }\\n                rgb[i] = limit(rgb[i], 0, 255);\\n            } else if (i === 3) {\\n                rgb[i] = limit(rgb[i], 0, 1);\\n            }\\n        }\\n        return rgb;\\n    };\\n\\n    // ported from jQuery's $.type\\n    var classToType = {};\\n    for (var i = 0, list = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Undefined', 'Null']; i < list.length; i += 1) {\\n        var name = list[i];\\n\\n        classToType[(\\\"[object \\\" + name + \\\"]\\\")] = name.toLowerCase();\\n    }\\n    var type = function(obj) {\\n        return classToType[Object.prototype.toString.call(obj)] || \\\"object\\\";\\n    };\\n\\n    var unpack = function (args, keyOrder) {\\n        if ( keyOrder === void 0 ) keyOrder=null;\\n\\n    \\t// if called with more than 3 arguments, we return the arguments\\n        if (args.length >= 3) { return Array.prototype.slice.call(args); }\\n        // with less than 3 args we check if first arg is object\\n        // and use the keyOrder string to extract and sort properties\\n    \\tif (type(args[0]) == 'object' && keyOrder) {\\n    \\t\\treturn keyOrder.split('')\\n    \\t\\t\\t.filter(function (k) { return args[0][k] !== undefined; })\\n    \\t\\t\\t.map(function (k) { return args[0][k]; });\\n    \\t}\\n    \\t// otherwise we just return the first argument\\n    \\t// (which we suppose is an array of args)\\n        return args[0];\\n    };\\n\\n    var last = function (args) {\\n        if (args.length < 2) { return null; }\\n        var l = args.length-1;\\n        if (type(args[l]) == 'string') { return args[l].toLowerCase(); }\\n        return null;\\n    };\\n\\n    var PI = Math.PI;\\n\\n    var utils = {\\n    \\tclip_rgb: clip_rgb,\\n    \\tlimit: limit,\\n    \\ttype: type,\\n    \\tunpack: unpack,\\n    \\tlast: last,\\n    \\tPI: PI,\\n    \\tTWOPI: PI*2,\\n    \\tPITHIRD: PI/3,\\n    \\tDEG2RAD: PI / 180,\\n    \\tRAD2DEG: 180 / PI\\n    };\\n\\n    var input = {\\n    \\tformat: {},\\n    \\tautodetect: []\\n    };\\n\\n    var last$1 = utils.last;\\n    var clip_rgb$1 = utils.clip_rgb;\\n    var type$1 = utils.type;\\n\\n\\n    var Color = function Color() {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var me = this;\\n        if (type$1(args[0]) === 'object' &&\\n            args[0].constructor &&\\n            args[0].constructor === this.constructor) {\\n            // the argument is already a Color instance\\n            return args[0];\\n        }\\n\\n        // last argument could be the mode\\n        var mode = last$1(args);\\n        var autodetect = false;\\n\\n        if (!mode) {\\n            autodetect = true;\\n            if (!input.sorted) {\\n                input.autodetect = input.autodetect.sort(function (a,b) { return b.p - a.p; });\\n                input.sorted = true;\\n            }\\n            // auto-detect format\\n            for (var i = 0, list = input.autodetect; i < list.length; i += 1) {\\n                var chk = list[i];\\n\\n                mode = chk.test.apply(chk, args);\\n                if (mode) { break; }\\n            }\\n        }\\n\\n        if (input.format[mode]) {\\n            var rgb = input.format[mode].apply(null, autodetect ? args : args.slice(0,-1));\\n            me._rgb = clip_rgb$1(rgb);\\n        } else {\\n            throw new Error('unknown format: '+args);\\n        }\\n\\n        // add alpha channel\\n        if (me._rgb.length === 3) { me._rgb.push(1); }\\n    };\\n\\n    Color.prototype.toString = function toString () {\\n        if (type$1(this.hex) == 'function') { return this.hex(); }\\n        return (\\\"[\\\" + (this._rgb.join(',')) + \\\"]\\\");\\n    };\\n\\n    var Color_1 = Color;\\n\\n    var chroma = function () {\\n    \\tvar args = [], len = arguments.length;\\n    \\twhile ( len-- ) args[ len ] = arguments[ len ];\\n\\n    \\treturn new (Function.prototype.bind.apply( chroma.Color, [ null ].concat( args) ));\\n    };\\n\\n    chroma.Color = Color_1;\\n    chroma.version = '2.1.2';\\n\\n    var chroma_1 = chroma;\\n\\n    var unpack$1 = utils.unpack;\\n    var max = Math.max;\\n\\n    var rgb2cmyk = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var ref = unpack$1(args, 'rgb');\\n        var r = ref[0];\\n        var g = ref[1];\\n        var b = ref[2];\\n        r = r / 255;\\n        g = g / 255;\\n        b = b / 255;\\n        var k = 1 - max(r,max(g,b));\\n        var f = k < 1 ? 1 / (1-k) : 0;\\n        var c = (1-r-k) * f;\\n        var m = (1-g-k) * f;\\n        var y = (1-b-k) * f;\\n        return [c,m,y,k];\\n    };\\n\\n    var rgb2cmyk_1 = rgb2cmyk;\\n\\n    var unpack$2 = utils.unpack;\\n\\n    var cmyk2rgb = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        args = unpack$2(args, 'cmyk');\\n        var c = args[0];\\n        var m = args[1];\\n        var y = args[2];\\n        var k = args[3];\\n        var alpha = args.length > 4 ? args[4] : 1;\\n        if (k === 1) { return [0,0,0,alpha]; }\\n        return [\\n            c >= 1 ? 0 : 255 * (1-c) * (1-k), // r\\n            m >= 1 ? 0 : 255 * (1-m) * (1-k), // g\\n            y >= 1 ? 0 : 255 * (1-y) * (1-k), // b\\n            alpha\\n        ];\\n    };\\n\\n    var cmyk2rgb_1 = cmyk2rgb;\\n\\n    var unpack$3 = utils.unpack;\\n    var type$2 = utils.type;\\n\\n\\n\\n    Color_1.prototype.cmyk = function() {\\n        return rgb2cmyk_1(this._rgb);\\n    };\\n\\n    chroma_1.cmyk = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['cmyk']) ));\\n    };\\n\\n    input.format.cmyk = cmyk2rgb_1;\\n\\n    input.autodetect.push({\\n        p: 2,\\n        test: function () {\\n            var args = [], len = arguments.length;\\n            while ( len-- ) args[ len ] = arguments[ len ];\\n\\n            args = unpack$3(args, 'cmyk');\\n            if (type$2(args) === 'array' && args.length === 4) {\\n                return 'cmyk';\\n            }\\n        }\\n    });\\n\\n    var unpack$4 = utils.unpack;\\n    var last$2 = utils.last;\\n    var rnd = function (a) { return Math.round(a*100)/100; };\\n\\n    /*\\n     * supported arguments:\\n     * - hsl2css(h,s,l)\\n     * - hsl2css(h,s,l,a)\\n     * - hsl2css([h,s,l], mode)\\n     * - hsl2css([h,s,l,a], mode)\\n     * - hsl2css({h,s,l,a}, mode)\\n     */\\n    var hsl2css = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var hsla = unpack$4(args, 'hsla');\\n        var mode = last$2(args) || 'lsa';\\n        hsla[0] = rnd(hsla[0] || 0);\\n        hsla[1] = rnd(hsla[1]*100) + '%';\\n        hsla[2] = rnd(hsla[2]*100) + '%';\\n        if (mode === 'hsla' || (hsla.length > 3 && hsla[3]<1)) {\\n            hsla[3] = hsla.length > 3 ? hsla[3] : 1;\\n            mode = 'hsla';\\n        } else {\\n            hsla.length = 3;\\n        }\\n        return (mode + \\\"(\\\" + (hsla.join(',')) + \\\")\\\");\\n    };\\n\\n    var hsl2css_1 = hsl2css;\\n\\n    var unpack$5 = utils.unpack;\\n\\n    /*\\n     * supported arguments:\\n     * - rgb2hsl(r,g,b)\\n     * - rgb2hsl(r,g,b,a)\\n     * - rgb2hsl([r,g,b])\\n     * - rgb2hsl([r,g,b,a])\\n     * - rgb2hsl({r,g,b,a})\\n     */\\n    var rgb2hsl = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        args = unpack$5(args, 'rgba');\\n        var r = args[0];\\n        var g = args[1];\\n        var b = args[2];\\n\\n        r /= 255;\\n        g /= 255;\\n        b /= 255;\\n\\n        var min = Math.min(r, g, b);\\n        var max = Math.max(r, g, b);\\n\\n        var l = (max + min) / 2;\\n        var s, h;\\n\\n        if (max === min){\\n            s = 0;\\n            h = Number.NaN;\\n        } else {\\n            s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\\n        }\\n\\n        if (r == max) { h = (g - b) / (max - min); }\\n        else if (g == max) { h = 2 + (b - r) / (max - min); }\\n        else if (b == max) { h = 4 + (r - g) / (max - min); }\\n\\n        h *= 60;\\n        if (h < 0) { h += 360; }\\n        if (args.length>3 && args[3]!==undefined) { return [h,s,l,args[3]]; }\\n        return [h,s,l];\\n    };\\n\\n    var rgb2hsl_1 = rgb2hsl;\\n\\n    var unpack$6 = utils.unpack;\\n    var last$3 = utils.last;\\n\\n\\n    var round = Math.round;\\n\\n    /*\\n     * supported arguments:\\n     * - rgb2css(r,g,b)\\n     * - rgb2css(r,g,b,a)\\n     * - rgb2css([r,g,b], mode)\\n     * - rgb2css([r,g,b,a], mode)\\n     * - rgb2css({r,g,b,a}, mode)\\n     */\\n    var rgb2css = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var rgba = unpack$6(args, 'rgba');\\n        var mode = last$3(args) || 'rgb';\\n        if (mode.substr(0,3) == 'hsl') {\\n            return hsl2css_1(rgb2hsl_1(rgba), mode);\\n        }\\n        rgba[0] = round(rgba[0]);\\n        rgba[1] = round(rgba[1]);\\n        rgba[2] = round(rgba[2]);\\n        if (mode === 'rgba' || (rgba.length > 3 && rgba[3]<1)) {\\n            rgba[3] = rgba.length > 3 ? rgba[3] : 1;\\n            mode = 'rgba';\\n        }\\n        return (mode + \\\"(\\\" + (rgba.slice(0,mode==='rgb'?3:4).join(',')) + \\\")\\\");\\n    };\\n\\n    var rgb2css_1 = rgb2css;\\n\\n    var unpack$7 = utils.unpack;\\n    var round$1 = Math.round;\\n\\n    var hsl2rgb = function () {\\n        var assign;\\n\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n        args = unpack$7(args, 'hsl');\\n        var h = args[0];\\n        var s = args[1];\\n        var l = args[2];\\n        var r,g,b;\\n        if (s === 0) {\\n            r = g = b = l*255;\\n        } else {\\n            var t3 = [0,0,0];\\n            var c = [0,0,0];\\n            var t2 = l < 0.5 ? l * (1+s) : l+s-l*s;\\n            var t1 = 2 * l - t2;\\n            var h_ = h / 360;\\n            t3[0] = h_ + 1/3;\\n            t3[1] = h_;\\n            t3[2] = h_ - 1/3;\\n            for (var i=0; i<3; i++) {\\n                if (t3[i] < 0) { t3[i] += 1; }\\n                if (t3[i] > 1) { t3[i] -= 1; }\\n                if (6 * t3[i] < 1)\\n                    { c[i] = t1 + (t2 - t1) * 6 * t3[i]; }\\n                else if (2 * t3[i] < 1)\\n                    { c[i] = t2; }\\n                else if (3 * t3[i] < 2)\\n                    { c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6; }\\n                else\\n                    { c[i] = t1; }\\n            }\\n            (assign = [round$1(c[0]*255),round$1(c[1]*255),round$1(c[2]*255)], r = assign[0], g = assign[1], b = assign[2]);\\n        }\\n        if (args.length > 3) {\\n            // keep alpha channel\\n            return [r,g,b,args[3]];\\n        }\\n        return [r,g,b,1];\\n    };\\n\\n    var hsl2rgb_1 = hsl2rgb;\\n\\n    var RE_RGB = /^rgb\\\\(\\\\s*(-?\\\\d+),\\\\s*(-?\\\\d+)\\\\s*,\\\\s*(-?\\\\d+)\\\\s*\\\\)$/;\\n    var RE_RGBA = /^rgba\\\\(\\\\s*(-?\\\\d+),\\\\s*(-?\\\\d+)\\\\s*,\\\\s*(-?\\\\d+)\\\\s*,\\\\s*([01]|[01]?\\\\.\\\\d+)\\\\)$/;\\n    var RE_RGB_PCT = /^rgb\\\\(\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%,\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%\\\\s*,\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%\\\\s*\\\\)$/;\\n    var RE_RGBA_PCT = /^rgba\\\\(\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%,\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%\\\\s*,\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%\\\\s*,\\\\s*([01]|[01]?\\\\.\\\\d+)\\\\)$/;\\n    var RE_HSL = /^hsl\\\\(\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?),\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%\\\\s*,\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%\\\\s*\\\\)$/;\\n    var RE_HSLA = /^hsla\\\\(\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?),\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%\\\\s*,\\\\s*(-?\\\\d+(?:\\\\.\\\\d+)?)%\\\\s*,\\\\s*([01]|[01]?\\\\.\\\\d+)\\\\)$/;\\n\\n    var round$2 = Math.round;\\n\\n    var css2rgb = function (css) {\\n        css = css.toLowerCase().trim();\\n        var m;\\n\\n        if (input.format.named) {\\n            try {\\n                return input.format.named(css);\\n            } catch (e) {\\n                // eslint-disable-next-line\\n            }\\n        }\\n\\n        // rgb(250,20,0)\\n        if ((m = css.match(RE_RGB))) {\\n            var rgb = m.slice(1,4);\\n            for (var i=0; i<3; i++) {\\n                rgb[i] = +rgb[i];\\n            }\\n            rgb[3] = 1;  // default alpha\\n            return rgb;\\n        }\\n\\n        // rgba(250,20,0,0.4)\\n        if ((m = css.match(RE_RGBA))) {\\n            var rgb$1 = m.slice(1,5);\\n            for (var i$1=0; i$1<4; i$1++) {\\n                rgb$1[i$1] = +rgb$1[i$1];\\n            }\\n            return rgb$1;\\n        }\\n\\n        // rgb(100%,0%,0%)\\n        if ((m = css.match(RE_RGB_PCT))) {\\n            var rgb$2 = m.slice(1,4);\\n            for (var i$2=0; i$2<3; i$2++) {\\n                rgb$2[i$2] = round$2(rgb$2[i$2] * 2.55);\\n            }\\n            rgb$2[3] = 1;  // default alpha\\n            return rgb$2;\\n        }\\n\\n        // rgba(100%,0%,0%,0.4)\\n        if ((m = css.match(RE_RGBA_PCT))) {\\n            var rgb$3 = m.slice(1,5);\\n            for (var i$3=0; i$3<3; i$3++) {\\n                rgb$3[i$3] = round$2(rgb$3[i$3] * 2.55);\\n            }\\n            rgb$3[3] = +rgb$3[3];\\n            return rgb$3;\\n        }\\n\\n        // hsl(0,100%,50%)\\n        if ((m = css.match(RE_HSL))) {\\n            var hsl = m.slice(1,4);\\n            hsl[1] *= 0.01;\\n            hsl[2] *= 0.01;\\n            var rgb$4 = hsl2rgb_1(hsl);\\n            rgb$4[3] = 1;\\n            return rgb$4;\\n        }\\n\\n        // hsla(0,100%,50%,0.5)\\n        if ((m = css.match(RE_HSLA))) {\\n            var hsl$1 = m.slice(1,4);\\n            hsl$1[1] *= 0.01;\\n            hsl$1[2] *= 0.01;\\n            var rgb$5 = hsl2rgb_1(hsl$1);\\n            rgb$5[3] = +m[4];  // default alpha = 1\\n            return rgb$5;\\n        }\\n    };\\n\\n    css2rgb.test = function (s) {\\n        return RE_RGB.test(s) ||\\n            RE_RGBA.test(s) ||\\n            RE_RGB_PCT.test(s) ||\\n            RE_RGBA_PCT.test(s) ||\\n            RE_HSL.test(s) ||\\n            RE_HSLA.test(s);\\n    };\\n\\n    var css2rgb_1 = css2rgb;\\n\\n    var type$3 = utils.type;\\n\\n\\n\\n\\n    Color_1.prototype.css = function(mode) {\\n        return rgb2css_1(this._rgb, mode);\\n    };\\n\\n    chroma_1.css = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['css']) ));\\n    };\\n\\n    input.format.css = css2rgb_1;\\n\\n    input.autodetect.push({\\n        p: 5,\\n        test: function (h) {\\n            var rest = [], len = arguments.length - 1;\\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\\n\\n            if (!rest.length && type$3(h) === 'string' && css2rgb_1.test(h)) {\\n                return 'css';\\n            }\\n        }\\n    });\\n\\n    var unpack$8 = utils.unpack;\\n\\n    input.format.gl = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var rgb = unpack$8(args, 'rgba');\\n        rgb[0] *= 255;\\n        rgb[1] *= 255;\\n        rgb[2] *= 255;\\n        return rgb;\\n    };\\n\\n    chroma_1.gl = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['gl']) ));\\n    };\\n\\n    Color_1.prototype.gl = function() {\\n        var rgb = this._rgb;\\n        return [rgb[0]/255, rgb[1]/255, rgb[2]/255, rgb[3]];\\n    };\\n\\n    var unpack$9 = utils.unpack;\\n\\n    var rgb2hcg = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var ref = unpack$9(args, 'rgb');\\n        var r = ref[0];\\n        var g = ref[1];\\n        var b = ref[2];\\n        var min = Math.min(r, g, b);\\n        var max = Math.max(r, g, b);\\n        var delta = max - min;\\n        var c = delta * 100 / 255;\\n        var _g = min / (255 - delta) * 100;\\n        var h;\\n        if (delta === 0) {\\n            h = Number.NaN;\\n        } else {\\n            if (r === max) { h = (g - b) / delta; }\\n            if (g === max) { h = 2+(b - r) / delta; }\\n            if (b === max) { h = 4+(r - g) / delta; }\\n            h *= 60;\\n            if (h < 0) { h += 360; }\\n        }\\n        return [h, c, _g];\\n    };\\n\\n    var rgb2hcg_1 = rgb2hcg;\\n\\n    var unpack$a = utils.unpack;\\n    var floor = Math.floor;\\n\\n    /*\\n     * this is basically just HSV with some minor tweaks\\n     *\\n     * hue.. [0..360]\\n     * chroma .. [0..1]\\n     * grayness .. [0..1]\\n     */\\n\\n    var hcg2rgb = function () {\\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\\n\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n        args = unpack$a(args, 'hcg');\\n        var h = args[0];\\n        var c = args[1];\\n        var _g = args[2];\\n        var r,g,b;\\n        _g = _g * 255;\\n        var _c = c * 255;\\n        if (c === 0) {\\n            r = g = b = _g;\\n        } else {\\n            if (h === 360) { h = 0; }\\n            if (h > 360) { h -= 360; }\\n            if (h < 0) { h += 360; }\\n            h /= 60;\\n            var i = floor(h);\\n            var f = h - i;\\n            var p = _g * (1 - c);\\n            var q = p + _c * (1 - f);\\n            var t = p + _c * f;\\n            var v = p + _c;\\n            switch (i) {\\n                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break\\n                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break\\n                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break\\n                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break\\n                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break\\n                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break\\n            }\\n        }\\n        return [r, g, b, args.length > 3 ? args[3] : 1];\\n    };\\n\\n    var hcg2rgb_1 = hcg2rgb;\\n\\n    var unpack$b = utils.unpack;\\n    var type$4 = utils.type;\\n\\n\\n\\n\\n\\n\\n    Color_1.prototype.hcg = function() {\\n        return rgb2hcg_1(this._rgb);\\n    };\\n\\n    chroma_1.hcg = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hcg']) ));\\n    };\\n\\n    input.format.hcg = hcg2rgb_1;\\n\\n    input.autodetect.push({\\n        p: 1,\\n        test: function () {\\n            var args = [], len = arguments.length;\\n            while ( len-- ) args[ len ] = arguments[ len ];\\n\\n            args = unpack$b(args, 'hcg');\\n            if (type$4(args) === 'array' && args.length === 3) {\\n                return 'hcg';\\n            }\\n        }\\n    });\\n\\n    var unpack$c = utils.unpack;\\n    var last$4 = utils.last;\\n    var round$3 = Math.round;\\n\\n    var rgb2hex = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var ref = unpack$c(args, 'rgba');\\n        var r = ref[0];\\n        var g = ref[1];\\n        var b = ref[2];\\n        var a = ref[3];\\n        var mode = last$4(args) || 'auto';\\n        if (a === undefined) { a = 1; }\\n        if (mode === 'auto') {\\n            mode = a < 1 ? 'rgba' : 'rgb';\\n        }\\n        r = round$3(r);\\n        g = round$3(g);\\n        b = round$3(b);\\n        var u = r << 16 | g << 8 | b;\\n        var str = \\\"000000\\\" + u.toString(16); //#.toUpperCase();\\n        str = str.substr(str.length - 6);\\n        var hxa = '0' + round$3(a * 255).toString(16);\\n        hxa = hxa.substr(hxa.length - 2);\\n        switch (mode.toLowerCase()) {\\n            case 'rgba': return (\\\"#\\\" + str + hxa);\\n            case 'argb': return (\\\"#\\\" + hxa + str);\\n            default: return (\\\"#\\\" + str);\\n        }\\n    };\\n\\n    var rgb2hex_1 = rgb2hex;\\n\\n    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\\n    var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;\\n\\n    var hex2rgb = function (hex) {\\n        if (hex.match(RE_HEX)) {\\n            // remove optional leading #\\n            if (hex.length === 4 || hex.length === 7) {\\n                hex = hex.substr(1);\\n            }\\n            // expand short-notation to full six-digit\\n            if (hex.length === 3) {\\n                hex = hex.split('');\\n                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];\\n            }\\n            var u = parseInt(hex, 16);\\n            var r = u >> 16;\\n            var g = u >> 8 & 0xFF;\\n            var b = u & 0xFF;\\n            return [r,g,b,1];\\n        }\\n\\n        // match rgba hex format, eg #FF000077\\n        if (hex.match(RE_HEXA)) {\\n            if (hex.length === 5 || hex.length === 9) {\\n                // remove optional leading #\\n                hex = hex.substr(1);\\n            }\\n            // expand short-notation to full eight-digit\\n            if (hex.length === 4) {\\n                hex = hex.split('');\\n                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3];\\n            }\\n            var u$1 = parseInt(hex, 16);\\n            var r$1 = u$1 >> 24 & 0xFF;\\n            var g$1 = u$1 >> 16 & 0xFF;\\n            var b$1 = u$1 >> 8 & 0xFF;\\n            var a = Math.round((u$1 & 0xFF) / 0xFF * 100) / 100;\\n            return [r$1,g$1,b$1,a];\\n        }\\n\\n        // we used to check for css colors here\\n        // if _input.css? and rgb = _input.css hex\\n        //     return rgb\\n\\n        throw new Error((\\\"unknown hex color: \\\" + hex));\\n    };\\n\\n    var hex2rgb_1 = hex2rgb;\\n\\n    var type$5 = utils.type;\\n\\n\\n\\n\\n    Color_1.prototype.hex = function(mode) {\\n        return rgb2hex_1(this._rgb, mode);\\n    };\\n\\n    chroma_1.hex = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hex']) ));\\n    };\\n\\n    input.format.hex = hex2rgb_1;\\n    input.autodetect.push({\\n        p: 4,\\n        test: function (h) {\\n            var rest = [], len = arguments.length - 1;\\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\\n\\n            if (!rest.length && type$5(h) === 'string' && [3,4,5,6,7,8,9].indexOf(h.length) >= 0) {\\n                return 'hex';\\n            }\\n        }\\n    });\\n\\n    var unpack$d = utils.unpack;\\n    var TWOPI = utils.TWOPI;\\n    var min = Math.min;\\n    var sqrt = Math.sqrt;\\n    var acos = Math.acos;\\n\\n    var rgb2hsi = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        /*\\n        borrowed from here:\\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\\n        */\\n        var ref = unpack$d(args, 'rgb');\\n        var r = ref[0];\\n        var g = ref[1];\\n        var b = ref[2];\\n        r /= 255;\\n        g /= 255;\\n        b /= 255;\\n        var h;\\n        var min_ = min(r,g,b);\\n        var i = (r+g+b) / 3;\\n        var s = i > 0 ? 1 - min_/i : 0;\\n        if (s === 0) {\\n            h = NaN;\\n        } else {\\n            h = ((r-g)+(r-b)) / 2;\\n            h /= sqrt((r-g)*(r-g) + (r-b)*(g-b));\\n            h = acos(h);\\n            if (b > g) {\\n                h = TWOPI - h;\\n            }\\n            h /= TWOPI;\\n        }\\n        return [h*360,s,i];\\n    };\\n\\n    var rgb2hsi_1 = rgb2hsi;\\n\\n    var unpack$e = utils.unpack;\\n    var limit$1 = utils.limit;\\n    var TWOPI$1 = utils.TWOPI;\\n    var PITHIRD = utils.PITHIRD;\\n    var cos = Math.cos;\\n\\n    /*\\n     * hue [0..360]\\n     * saturation [0..1]\\n     * intensity [0..1]\\n     */\\n    var hsi2rgb = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        /*\\n        borrowed from here:\\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\\n        */\\n        args = unpack$e(args, 'hsi');\\n        var h = args[0];\\n        var s = args[1];\\n        var i = args[2];\\n        var r,g,b;\\n\\n        if (isNaN(h)) { h = 0; }\\n        if (isNaN(s)) { s = 0; }\\n        // normalize hue\\n        if (h > 360) { h -= 360; }\\n        if (h < 0) { h += 360; }\\n        h /= 360;\\n        if (h < 1/3) {\\n            b = (1-s)/3;\\n            r = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;\\n            g = 1 - (b+r);\\n        } else if (h < 2/3) {\\n            h -= 1/3;\\n            r = (1-s)/3;\\n            g = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;\\n            b = 1 - (r+g);\\n        } else {\\n            h -= 2/3;\\n            g = (1-s)/3;\\n            b = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;\\n            r = 1 - (g+b);\\n        }\\n        r = limit$1(i*r*3);\\n        g = limit$1(i*g*3);\\n        b = limit$1(i*b*3);\\n        return [r*255, g*255, b*255, args.length > 3 ? args[3] : 1];\\n    };\\n\\n    var hsi2rgb_1 = hsi2rgb;\\n\\n    var unpack$f = utils.unpack;\\n    var type$6 = utils.type;\\n\\n\\n\\n\\n\\n\\n    Color_1.prototype.hsi = function() {\\n        return rgb2hsi_1(this._rgb);\\n    };\\n\\n    chroma_1.hsi = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsi']) ));\\n    };\\n\\n    input.format.hsi = hsi2rgb_1;\\n\\n    input.autodetect.push({\\n        p: 2,\\n        test: function () {\\n            var args = [], len = arguments.length;\\n            while ( len-- ) args[ len ] = arguments[ len ];\\n\\n            args = unpack$f(args, 'hsi');\\n            if (type$6(args) === 'array' && args.length === 3) {\\n                return 'hsi';\\n            }\\n        }\\n    });\\n\\n    var unpack$g = utils.unpack;\\n    var type$7 = utils.type;\\n\\n\\n\\n\\n\\n\\n    Color_1.prototype.hsl = function() {\\n        return rgb2hsl_1(this._rgb);\\n    };\\n\\n    chroma_1.hsl = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsl']) ));\\n    };\\n\\n    input.format.hsl = hsl2rgb_1;\\n\\n    input.autodetect.push({\\n        p: 2,\\n        test: function () {\\n            var args = [], len = arguments.length;\\n            while ( len-- ) args[ len ] = arguments[ len ];\\n\\n            args = unpack$g(args, 'hsl');\\n            if (type$7(args) === 'array' && args.length === 3) {\\n                return 'hsl';\\n            }\\n        }\\n    });\\n\\n    var unpack$h = utils.unpack;\\n    var min$1 = Math.min;\\n    var max$1 = Math.max;\\n\\n    /*\\n     * supported arguments:\\n     * - rgb2hsv(r,g,b)\\n     * - rgb2hsv([r,g,b])\\n     * - rgb2hsv({r,g,b})\\n     */\\n    var rgb2hsl$1 = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        args = unpack$h(args, 'rgb');\\n        var r = args[0];\\n        var g = args[1];\\n        var b = args[2];\\n        var min_ = min$1(r, g, b);\\n        var max_ = max$1(r, g, b);\\n        var delta = max_ - min_;\\n        var h,s,v;\\n        v = max_ / 255.0;\\n        if (max_ === 0) {\\n            h = Number.NaN;\\n            s = 0;\\n        } else {\\n            s = delta / max_;\\n            if (r === max_) { h = (g - b) / delta; }\\n            if (g === max_) { h = 2+(b - r) / delta; }\\n            if (b === max_) { h = 4+(r - g) / delta; }\\n            h *= 60;\\n            if (h < 0) { h += 360; }\\n        }\\n        return [h, s, v]\\n    };\\n\\n    var rgb2hsv = rgb2hsl$1;\\n\\n    var unpack$i = utils.unpack;\\n    var floor$1 = Math.floor;\\n\\n    var hsv2rgb = function () {\\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\\n\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n        args = unpack$i(args, 'hsv');\\n        var h = args[0];\\n        var s = args[1];\\n        var v = args[2];\\n        var r,g,b;\\n        v *= 255;\\n        if (s === 0) {\\n            r = g = b = v;\\n        } else {\\n            if (h === 360) { h = 0; }\\n            if (h > 360) { h -= 360; }\\n            if (h < 0) { h += 360; }\\n            h /= 60;\\n\\n            var i = floor$1(h);\\n            var f = h - i;\\n            var p = v * (1 - s);\\n            var q = v * (1 - s * f);\\n            var t = v * (1 - s * (1 - f));\\n\\n            switch (i) {\\n                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break\\n                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break\\n                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break\\n                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break\\n                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break\\n                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break\\n            }\\n        }\\n        return [r,g,b,args.length > 3?args[3]:1];\\n    };\\n\\n    var hsv2rgb_1 = hsv2rgb;\\n\\n    var unpack$j = utils.unpack;\\n    var type$8 = utils.type;\\n\\n\\n\\n\\n\\n\\n    Color_1.prototype.hsv = function() {\\n        return rgb2hsv(this._rgb);\\n    };\\n\\n    chroma_1.hsv = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsv']) ));\\n    };\\n\\n    input.format.hsv = hsv2rgb_1;\\n\\n    input.autodetect.push({\\n        p: 2,\\n        test: function () {\\n            var args = [], len = arguments.length;\\n            while ( len-- ) args[ len ] = arguments[ len ];\\n\\n            args = unpack$j(args, 'hsv');\\n            if (type$8(args) === 'array' && args.length === 3) {\\n                return 'hsv';\\n            }\\n        }\\n    });\\n\\n    var labConstants = {\\n        // Corresponds roughly to RGB brighter/darker\\n        Kn: 18,\\n\\n        // D65 standard referent\\n        Xn: 0.950470,\\n        Yn: 1,\\n        Zn: 1.088830,\\n\\n        t0: 0.137931034,  // 4 / 29\\n        t1: 0.206896552,  // 6 / 29\\n        t2: 0.12841855,   // 3 * t1 * t1\\n        t3: 0.008856452,  // t1 * t1 * t1\\n    };\\n\\n    var unpack$k = utils.unpack;\\n    var pow = Math.pow;\\n\\n    var rgb2lab = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var ref = unpack$k(args, 'rgb');\\n        var r = ref[0];\\n        var g = ref[1];\\n        var b = ref[2];\\n        var ref$1 = rgb2xyz(r,g,b);\\n        var x = ref$1[0];\\n        var y = ref$1[1];\\n        var z = ref$1[2];\\n        var l = 116 * y - 16;\\n        return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];\\n    };\\n\\n    var rgb_xyz = function (r) {\\n        if ((r /= 255) <= 0.04045) { return r / 12.92; }\\n        return pow((r + 0.055) / 1.055, 2.4);\\n    };\\n\\n    var xyz_lab = function (t) {\\n        if (t > labConstants.t3) { return pow(t, 1 / 3); }\\n        return t / labConstants.t2 + labConstants.t0;\\n    };\\n\\n    var rgb2xyz = function (r,g,b) {\\n        r = rgb_xyz(r);\\n        g = rgb_xyz(g);\\n        b = rgb_xyz(b);\\n        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / labConstants.Xn);\\n        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / labConstants.Yn);\\n        var z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / labConstants.Zn);\\n        return [x,y,z];\\n    };\\n\\n    var rgb2lab_1 = rgb2lab;\\n\\n    var unpack$l = utils.unpack;\\n    var pow$1 = Math.pow;\\n\\n    /*\\n     * L* [0..100]\\n     * a [-100..100]\\n     * b [-100..100]\\n     */\\n    var lab2rgb = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        args = unpack$l(args, 'lab');\\n        var l = args[0];\\n        var a = args[1];\\n        var b = args[2];\\n        var x,y,z, r,g,b_;\\n\\n        y = (l + 16) / 116;\\n        x = isNaN(a) ? y : y + a / 500;\\n        z = isNaN(b) ? y : y - b / 200;\\n\\n        y = labConstants.Yn * lab_xyz(y);\\n        x = labConstants.Xn * lab_xyz(x);\\n        z = labConstants.Zn * lab_xyz(z);\\n\\n        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);  // D65 -> sRGB\\n        g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\\n        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\\n\\n        return [r,g,b_,args.length > 3 ? args[3] : 1];\\n    };\\n\\n    var xyz_rgb = function (r) {\\n        return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow$1(r, 1 / 2.4) - 0.055)\\n    };\\n\\n    var lab_xyz = function (t) {\\n        return t > labConstants.t1 ? t * t * t : labConstants.t2 * (t - labConstants.t0)\\n    };\\n\\n    var lab2rgb_1 = lab2rgb;\\n\\n    var unpack$m = utils.unpack;\\n    var type$9 = utils.type;\\n\\n\\n\\n\\n\\n\\n    Color_1.prototype.lab = function() {\\n        return rgb2lab_1(this._rgb);\\n    };\\n\\n    chroma_1.lab = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['lab']) ));\\n    };\\n\\n    input.format.lab = lab2rgb_1;\\n\\n    input.autodetect.push({\\n        p: 2,\\n        test: function () {\\n            var args = [], len = arguments.length;\\n            while ( len-- ) args[ len ] = arguments[ len ];\\n\\n            args = unpack$m(args, 'lab');\\n            if (type$9(args) === 'array' && args.length === 3) {\\n                return 'lab';\\n            }\\n        }\\n    });\\n\\n    var unpack$n = utils.unpack;\\n    var RAD2DEG = utils.RAD2DEG;\\n    var sqrt$1 = Math.sqrt;\\n    var atan2 = Math.atan2;\\n    var round$4 = Math.round;\\n\\n    var lab2lch = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var ref = unpack$n(args, 'lab');\\n        var l = ref[0];\\n        var a = ref[1];\\n        var b = ref[2];\\n        var c = sqrt$1(a * a + b * b);\\n        var h = (atan2(b, a) * RAD2DEG + 360) % 360;\\n        if (round$4(c*10000) === 0) { h = Number.NaN; }\\n        return [l, c, h];\\n    };\\n\\n    var lab2lch_1 = lab2lch;\\n\\n    var unpack$o = utils.unpack;\\n\\n\\n\\n    var rgb2lch = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var ref = unpack$o(args, 'rgb');\\n        var r = ref[0];\\n        var g = ref[1];\\n        var b = ref[2];\\n        var ref$1 = rgb2lab_1(r,g,b);\\n        var l = ref$1[0];\\n        var a = ref$1[1];\\n        var b_ = ref$1[2];\\n        return lab2lch_1(l,a,b_);\\n    };\\n\\n    var rgb2lch_1 = rgb2lch;\\n\\n    var unpack$p = utils.unpack;\\n    var DEG2RAD = utils.DEG2RAD;\\n    var sin = Math.sin;\\n    var cos$1 = Math.cos;\\n\\n    var lch2lab = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        /*\\n        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\\n        These formulas were invented by David Dalrymple to obtain maximum contrast without going\\n        out of gamut if the parameters are in the range 0-1.\\n\\n        A saturation multiplier was added by Gregor Aisch\\n        */\\n        var ref = unpack$p(args, 'lch');\\n        var l = ref[0];\\n        var c = ref[1];\\n        var h = ref[2];\\n        if (isNaN(h)) { h = 0; }\\n        h = h * DEG2RAD;\\n        return [l, cos$1(h) * c, sin(h) * c]\\n    };\\n\\n    var lch2lab_1 = lch2lab;\\n\\n    var unpack$q = utils.unpack;\\n\\n\\n\\n    var lch2rgb = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        args = unpack$q(args, 'lch');\\n        var l = args[0];\\n        var c = args[1];\\n        var h = args[2];\\n        var ref = lch2lab_1 (l,c,h);\\n        var L = ref[0];\\n        var a = ref[1];\\n        var b_ = ref[2];\\n        var ref$1 = lab2rgb_1 (L,a,b_);\\n        var r = ref$1[0];\\n        var g = ref$1[1];\\n        var b = ref$1[2];\\n        return [r, g, b, args.length > 3 ? args[3] : 1];\\n    };\\n\\n    var lch2rgb_1 = lch2rgb;\\n\\n    var unpack$r = utils.unpack;\\n\\n\\n    var hcl2rgb = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var hcl = unpack$r(args, 'hcl').reverse();\\n        return lch2rgb_1.apply(void 0, hcl);\\n    };\\n\\n    var hcl2rgb_1 = hcl2rgb;\\n\\n    var unpack$s = utils.unpack;\\n    var type$a = utils.type;\\n\\n\\n\\n\\n\\n\\n    Color_1.prototype.lch = function() { return rgb2lch_1(this._rgb); };\\n    Color_1.prototype.hcl = function() { return rgb2lch_1(this._rgb).reverse(); };\\n\\n    chroma_1.lch = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['lch']) ));\\n    };\\n    chroma_1.hcl = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hcl']) ));\\n    };\\n\\n    input.format.lch = lch2rgb_1;\\n    input.format.hcl = hcl2rgb_1;\\n\\n    ['lch','hcl'].forEach(function (m) { return input.autodetect.push({\\n        p: 2,\\n        test: function () {\\n            var args = [], len = arguments.length;\\n            while ( len-- ) args[ len ] = arguments[ len ];\\n\\n            args = unpack$s(args, m);\\n            if (type$a(args) === 'array' && args.length === 3) {\\n                return m;\\n            }\\n        }\\n    }); });\\n\\n    /**\\n    \\tX11 color names\\n\\n    \\thttp://www.w3.org/TR/css3-color/#svg-color\\n    */\\n\\n    var w3cx11 = {\\n        aliceblue: '#f0f8ff',\\n        antiquewhite: '#faebd7',\\n        aqua: '#00ffff',\\n        aquamarine: '#7fffd4',\\n        azure: '#f0ffff',\\n        beige: '#f5f5dc',\\n        bisque: '#ffe4c4',\\n        black: '#000000',\\n        blanchedalmond: '#ffebcd',\\n        blue: '#0000ff',\\n        blueviolet: '#8a2be2',\\n        brown: '#a52a2a',\\n        burlywood: '#deb887',\\n        cadetblue: '#5f9ea0',\\n        chartreuse: '#7fff00',\\n        chocolate: '#d2691e',\\n        coral: '#ff7f50',\\n        cornflower: '#6495ed',\\n        cornflowerblue: '#6495ed',\\n        cornsilk: '#fff8dc',\\n        crimson: '#dc143c',\\n        cyan: '#00ffff',\\n        darkblue: '#00008b',\\n        darkcyan: '#008b8b',\\n        darkgoldenrod: '#b8860b',\\n        darkgray: '#a9a9a9',\\n        darkgreen: '#006400',\\n        darkgrey: '#a9a9a9',\\n        darkkhaki: '#bdb76b',\\n        darkmagenta: '#8b008b',\\n        darkolivegreen: '#556b2f',\\n        darkorange: '#ff8c00',\\n        darkorchid: '#9932cc',\\n        darkred: '#8b0000',\\n        darksalmon: '#e9967a',\\n        darkseagreen: '#8fbc8f',\\n        darkslateblue: '#483d8b',\\n        darkslategray: '#2f4f4f',\\n        darkslategrey: '#2f4f4f',\\n        darkturquoise: '#00ced1',\\n        darkviolet: '#9400d3',\\n        deeppink: '#ff1493',\\n        deepskyblue: '#00bfff',\\n        dimgray: '#696969',\\n        dimgrey: '#696969',\\n        dodgerblue: '#1e90ff',\\n        firebrick: '#b22222',\\n        floralwhite: '#fffaf0',\\n        forestgreen: '#228b22',\\n        fuchsia: '#ff00ff',\\n        gainsboro: '#dcdcdc',\\n        ghostwhite: '#f8f8ff',\\n        gold: '#ffd700',\\n        goldenrod: '#daa520',\\n        gray: '#808080',\\n        green: '#008000',\\n        greenyellow: '#adff2f',\\n        grey: '#808080',\\n        honeydew: '#f0fff0',\\n        hotpink: '#ff69b4',\\n        indianred: '#cd5c5c',\\n        indigo: '#4b0082',\\n        ivory: '#fffff0',\\n        khaki: '#f0e68c',\\n        laserlemon: '#ffff54',\\n        lavender: '#e6e6fa',\\n        lavenderblush: '#fff0f5',\\n        lawngreen: '#7cfc00',\\n        lemonchiffon: '#fffacd',\\n        lightblue: '#add8e6',\\n        lightcoral: '#f08080',\\n        lightcyan: '#e0ffff',\\n        lightgoldenrod: '#fafad2',\\n        lightgoldenrodyellow: '#fafad2',\\n        lightgray: '#d3d3d3',\\n        lightgreen: '#90ee90',\\n        lightgrey: '#d3d3d3',\\n        lightpink: '#ffb6c1',\\n        lightsalmon: '#ffa07a',\\n        lightseagreen: '#20b2aa',\\n        lightskyblue: '#87cefa',\\n        lightslategray: '#778899',\\n        lightslategrey: '#778899',\\n        lightsteelblue: '#b0c4de',\\n        lightyellow: '#ffffe0',\\n        lime: '#00ff00',\\n        limegreen: '#32cd32',\\n        linen: '#faf0e6',\\n        magenta: '#ff00ff',\\n        maroon: '#800000',\\n        maroon2: '#7f0000',\\n        maroon3: '#b03060',\\n        mediumaquamarine: '#66cdaa',\\n        mediumblue: '#0000cd',\\n        mediumorchid: '#ba55d3',\\n        mediumpurple: '#9370db',\\n        mediumseagreen: '#3cb371',\\n        mediumslateblue: '#7b68ee',\\n        mediumspringgreen: '#00fa9a',\\n        mediumturquoise: '#48d1cc',\\n        mediumvioletred: '#c71585',\\n        midnightblue: '#191970',\\n        mintcream: '#f5fffa',\\n        mistyrose: '#ffe4e1',\\n        moccasin: '#ffe4b5',\\n        navajowhite: '#ffdead',\\n        navy: '#000080',\\n        oldlace: '#fdf5e6',\\n        olive: '#808000',\\n        olivedrab: '#6b8e23',\\n        orange: '#ffa500',\\n        orangered: '#ff4500',\\n        orchid: '#da70d6',\\n        palegoldenrod: '#eee8aa',\\n        palegreen: '#98fb98',\\n        paleturquoise: '#afeeee',\\n        palevioletred: '#db7093',\\n        papayawhip: '#ffefd5',\\n        peachpuff: '#ffdab9',\\n        peru: '#cd853f',\\n        pink: '#ffc0cb',\\n        plum: '#dda0dd',\\n        powderblue: '#b0e0e6',\\n        purple: '#800080',\\n        purple2: '#7f007f',\\n        purple3: '#a020f0',\\n        rebeccapurple: '#663399',\\n        red: '#ff0000',\\n        rosybrown: '#bc8f8f',\\n        royalblue: '#4169e1',\\n        saddlebrown: '#8b4513',\\n        salmon: '#fa8072',\\n        sandybrown: '#f4a460',\\n        seagreen: '#2e8b57',\\n        seashell: '#fff5ee',\\n        sienna: '#a0522d',\\n        silver: '#c0c0c0',\\n        skyblue: '#87ceeb',\\n        slateblue: '#6a5acd',\\n        slategray: '#708090',\\n        slategrey: '#708090',\\n        snow: '#fffafa',\\n        springgreen: '#00ff7f',\\n        steelblue: '#4682b4',\\n        tan: '#d2b48c',\\n        teal: '#008080',\\n        thistle: '#d8bfd8',\\n        tomato: '#ff6347',\\n        turquoise: '#40e0d0',\\n        violet: '#ee82ee',\\n        wheat: '#f5deb3',\\n        white: '#ffffff',\\n        whitesmoke: '#f5f5f5',\\n        yellow: '#ffff00',\\n        yellowgreen: '#9acd32'\\n    };\\n\\n    var w3cx11_1 = w3cx11;\\n\\n    var type$b = utils.type;\\n\\n\\n\\n\\n\\n    Color_1.prototype.name = function() {\\n        var hex = rgb2hex_1(this._rgb, 'rgb');\\n        for (var i = 0, list = Object.keys(w3cx11_1); i < list.length; i += 1) {\\n            var n = list[i];\\n\\n            if (w3cx11_1[n] === hex) { return n.toLowerCase(); }\\n        }\\n        return hex;\\n    };\\n\\n    input.format.named = function (name) {\\n        name = name.toLowerCase();\\n        if (w3cx11_1[name]) { return hex2rgb_1(w3cx11_1[name]); }\\n        throw new Error('unknown color name: '+name);\\n    };\\n\\n    input.autodetect.push({\\n        p: 5,\\n        test: function (h) {\\n            var rest = [], len = arguments.length - 1;\\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\\n\\n            if (!rest.length && type$b(h) === 'string' && w3cx11_1[h.toLowerCase()]) {\\n                return 'named';\\n            }\\n        }\\n    });\\n\\n    var unpack$t = utils.unpack;\\n\\n    var rgb2num = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var ref = unpack$t(args, 'rgb');\\n        var r = ref[0];\\n        var g = ref[1];\\n        var b = ref[2];\\n        return (r << 16) + (g << 8) + b;\\n    };\\n\\n    var rgb2num_1 = rgb2num;\\n\\n    var type$c = utils.type;\\n\\n    var num2rgb = function (num) {\\n        if (type$c(num) == \\\"number\\\" && num >= 0 && num <= 0xFFFFFF) {\\n            var r = num >> 16;\\n            var g = (num >> 8) & 0xFF;\\n            var b = num & 0xFF;\\n            return [r,g,b,1];\\n        }\\n        throw new Error(\\\"unknown num color: \\\"+num);\\n    };\\n\\n    var num2rgb_1 = num2rgb;\\n\\n    var type$d = utils.type;\\n\\n\\n\\n    Color_1.prototype.num = function() {\\n        return rgb2num_1(this._rgb);\\n    };\\n\\n    chroma_1.num = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['num']) ));\\n    };\\n\\n    input.format.num = num2rgb_1;\\n\\n    input.autodetect.push({\\n        p: 5,\\n        test: function () {\\n            var args = [], len = arguments.length;\\n            while ( len-- ) args[ len ] = arguments[ len ];\\n\\n            if (args.length === 1 && type$d(args[0]) === 'number' && args[0] >= 0 && args[0] <= 0xFFFFFF) {\\n                return 'num';\\n            }\\n        }\\n    });\\n\\n    var unpack$u = utils.unpack;\\n    var type$e = utils.type;\\n    var round$5 = Math.round;\\n\\n    Color_1.prototype.rgb = function(rnd) {\\n        if ( rnd === void 0 ) rnd=true;\\n\\n        if (rnd === false) { return this._rgb.slice(0,3); }\\n        return this._rgb.slice(0,3).map(round$5);\\n    };\\n\\n    Color_1.prototype.rgba = function(rnd) {\\n        if ( rnd === void 0 ) rnd=true;\\n\\n        return this._rgb.slice(0,4).map(function (v,i) {\\n            return i<3 ? (rnd === false ? v : round$5(v)) : v;\\n        });\\n    };\\n\\n    chroma_1.rgb = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['rgb']) ));\\n    };\\n\\n    input.format.rgb = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var rgba = unpack$u(args, 'rgba');\\n        if (rgba[3] === undefined) { rgba[3] = 1; }\\n        return rgba;\\n    };\\n\\n    input.autodetect.push({\\n        p: 3,\\n        test: function () {\\n            var args = [], len = arguments.length;\\n            while ( len-- ) args[ len ] = arguments[ len ];\\n\\n            args = unpack$u(args, 'rgba');\\n            if (type$e(args) === 'array' && (args.length === 3 ||\\n                args.length === 4 && type$e(args[3]) == 'number' && args[3] >= 0 && args[3] <= 1)) {\\n                return 'rgb';\\n            }\\n        }\\n    });\\n\\n    /*\\n     * Based on implementation by Neil Bartlett\\n     * https://github.com/neilbartlett/color-temperature\\n     */\\n\\n    var log = Math.log;\\n\\n    var temperature2rgb = function (kelvin) {\\n        var temp = kelvin / 100;\\n        var r,g,b;\\n        if (temp < 66) {\\n            r = 255;\\n            g = -155.25485562709179 - 0.44596950469579133 * (g = temp-2) + 104.49216199393888 * log(g);\\n            b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp-10) + 115.67994401066147 * log(b);\\n        } else {\\n            r = 351.97690566805693 + 0.114206453784165 * (r = temp-55) - 40.25366309332127 * log(r);\\n            g = 325.4494125711974 + 0.07943456536662342 * (g = temp-50) - 28.0852963507957 * log(g);\\n            b = 255;\\n        }\\n        return [r,g,b,1];\\n    };\\n\\n    var temperature2rgb_1 = temperature2rgb;\\n\\n    /*\\n     * Based on implementation by Neil Bartlett\\n     * https://github.com/neilbartlett/color-temperature\\n     **/\\n\\n\\n    var unpack$v = utils.unpack;\\n    var round$6 = Math.round;\\n\\n    var rgb2temperature = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        var rgb = unpack$v(args, 'rgb');\\n        var r = rgb[0], b = rgb[2];\\n        var minTemp = 1000;\\n        var maxTemp = 40000;\\n        var eps = 0.4;\\n        var temp;\\n        while (maxTemp - minTemp > eps) {\\n            temp = (maxTemp + minTemp) * 0.5;\\n            var rgb$1 = temperature2rgb_1(temp);\\n            if ((rgb$1[2] / rgb$1[0]) >= (b / r)) {\\n                maxTemp = temp;\\n            } else {\\n                minTemp = temp;\\n            }\\n        }\\n        return round$6(temp);\\n    };\\n\\n    var rgb2temperature_1 = rgb2temperature;\\n\\n    Color_1.prototype.temp =\\n    Color_1.prototype.kelvin =\\n    Color_1.prototype.temperature = function() {\\n        return rgb2temperature_1(this._rgb);\\n    };\\n\\n    chroma_1.temp =\\n    chroma_1.kelvin =\\n    chroma_1.temperature = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['temp']) ));\\n    };\\n\\n    input.format.temp =\\n    input.format.kelvin =\\n    input.format.temperature = temperature2rgb_1;\\n\\n    var type$f = utils.type;\\n\\n    Color_1.prototype.alpha = function(a, mutate) {\\n        if ( mutate === void 0 ) mutate=false;\\n\\n        if (a !== undefined && type$f(a) === 'number') {\\n            if (mutate) {\\n                this._rgb[3] = a;\\n                return this;\\n            }\\n            return new Color_1([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\\n        }\\n        return this._rgb[3];\\n    };\\n\\n    Color_1.prototype.clipped = function() {\\n        return this._rgb._clipped || false;\\n    };\\n\\n    Color_1.prototype.darken = function(amount) {\\n    \\tif ( amount === void 0 ) amount=1;\\n\\n    \\tvar me = this;\\n    \\tvar lab = me.lab();\\n    \\tlab[0] -= labConstants.Kn * amount;\\n    \\treturn new Color_1(lab, 'lab').alpha(me.alpha(), true);\\n    };\\n\\n    Color_1.prototype.brighten = function(amount) {\\n    \\tif ( amount === void 0 ) amount=1;\\n\\n    \\treturn this.darken(-amount);\\n    };\\n\\n    Color_1.prototype.darker = Color_1.prototype.darken;\\n    Color_1.prototype.brighter = Color_1.prototype.brighten;\\n\\n    Color_1.prototype.get = function(mc) {\\n        var ref = mc.split('.');\\n        var mode = ref[0];\\n        var channel = ref[1];\\n        var src = this[mode]();\\n        if (channel) {\\n            var i = mode.indexOf(channel);\\n            if (i > -1) { return src[i]; }\\n            throw new Error((\\\"unknown channel \\\" + channel + \\\" in mode \\\" + mode));\\n        } else {\\n            return src;\\n        }\\n    };\\n\\n    var type$g = utils.type;\\n    var pow$2 = Math.pow;\\n\\n    var EPS = 1e-7;\\n    var MAX_ITER = 20;\\n\\n    Color_1.prototype.luminance = function(lum) {\\n        if (lum !== undefined && type$g(lum) === 'number') {\\n            if (lum === 0) {\\n                // return pure black\\n                return new Color_1([0,0,0,this._rgb[3]], 'rgb');\\n            }\\n            if (lum === 1) {\\n                // return pure white\\n                return new Color_1([255,255,255,this._rgb[3]], 'rgb');\\n            }\\n            // compute new color using...\\n            var cur_lum = this.luminance();\\n            var mode = 'rgb';\\n            var max_iter = MAX_ITER;\\n\\n            var test = function (low, high) {\\n                var mid = low.interpolate(high, 0.5, mode);\\n                var lm = mid.luminance();\\n                if (Math.abs(lum - lm) < EPS || !max_iter--) {\\n                    // close enough\\n                    return mid;\\n                }\\n                return lm > lum ? test(low, mid) : test(mid, high);\\n            };\\n\\n            var rgb = (cur_lum > lum ? test(new Color_1([0,0,0]), this) : test(this, new Color_1([255,255,255]))).rgb();\\n            return new Color_1(rgb.concat( [this._rgb[3]]));\\n        }\\n        return rgb2luminance.apply(void 0, (this._rgb).slice(0,3));\\n    };\\n\\n\\n    var rgb2luminance = function (r,g,b) {\\n        // relative luminance\\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\\n        r = luminance_x(r);\\n        g = luminance_x(g);\\n        b = luminance_x(b);\\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\\n    };\\n\\n    var luminance_x = function (x) {\\n        x /= 255;\\n        return x <= 0.03928 ? x/12.92 : pow$2((x+0.055)/1.055, 2.4);\\n    };\\n\\n    var interpolator = {};\\n\\n    var type$h = utils.type;\\n\\n\\n    var mix = function (col1, col2, f) {\\n        if ( f === void 0 ) f=0.5;\\n        var rest = [], len = arguments.length - 3;\\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 3 ];\\n\\n        var mode = rest[0] || 'lrgb';\\n        if (!interpolator[mode] && !rest.length) {\\n            // fall back to the first supported mode\\n            mode = Object.keys(interpolator)[0];\\n        }\\n        if (!interpolator[mode]) {\\n            throw new Error((\\\"interpolation mode \\\" + mode + \\\" is not defined\\\"));\\n        }\\n        if (type$h(col1) !== 'object') { col1 = new Color_1(col1); }\\n        if (type$h(col2) !== 'object') { col2 = new Color_1(col2); }\\n        return interpolator[mode](col1, col2, f)\\n            .alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\\n    };\\n\\n    Color_1.prototype.mix =\\n    Color_1.prototype.interpolate = function(col2, f) {\\n    \\tif ( f === void 0 ) f=0.5;\\n    \\tvar rest = [], len = arguments.length - 2;\\n    \\twhile ( len-- > 0 ) rest[ len ] = arguments[ len + 2 ];\\n\\n    \\treturn mix.apply(void 0, [ this, col2, f ].concat( rest ));\\n    };\\n\\n    Color_1.prototype.premultiply = function(mutate) {\\n    \\tif ( mutate === void 0 ) mutate=false;\\n\\n    \\tvar rgb = this._rgb;\\n    \\tvar a = rgb[3];\\n    \\tif (mutate) {\\n    \\t\\tthis._rgb = [rgb[0]*a, rgb[1]*a, rgb[2]*a, a];\\n    \\t\\treturn this;\\n    \\t} else {\\n    \\t\\treturn new Color_1([rgb[0]*a, rgb[1]*a, rgb[2]*a, a], 'rgb');\\n    \\t}\\n    };\\n\\n    Color_1.prototype.saturate = function(amount) {\\n    \\tif ( amount === void 0 ) amount=1;\\n\\n    \\tvar me = this;\\n    \\tvar lch = me.lch();\\n    \\tlch[1] += labConstants.Kn * amount;\\n    \\tif (lch[1] < 0) { lch[1] = 0; }\\n    \\treturn new Color_1(lch, 'lch').alpha(me.alpha(), true);\\n    };\\n\\n    Color_1.prototype.desaturate = function(amount) {\\n    \\tif ( amount === void 0 ) amount=1;\\n\\n    \\treturn this.saturate(-amount);\\n    };\\n\\n    var type$i = utils.type;\\n\\n    Color_1.prototype.set = function(mc, value, mutate) {\\n        if ( mutate === void 0 ) mutate=false;\\n\\n        var ref = mc.split('.');\\n        var mode = ref[0];\\n        var channel = ref[1];\\n        var src = this[mode]();\\n        if (channel) {\\n            var i = mode.indexOf(channel);\\n            if (i > -1) {\\n                if (type$i(value) == 'string') {\\n                    switch(value.charAt(0)) {\\n                        case '+': src[i] += +value; break;\\n                        case '-': src[i] += +value; break;\\n                        case '*': src[i] *= +(value.substr(1)); break;\\n                        case '/': src[i] /= +(value.substr(1)); break;\\n                        default: src[i] = +value;\\n                    }\\n                } else if (type$i(value) === 'number') {\\n                    src[i] = value;\\n                } else {\\n                    throw new Error(\\\"unsupported value for Color.set\\\");\\n                }\\n                var out = new Color_1(src, mode);\\n                if (mutate) {\\n                    this._rgb = out._rgb;\\n                    return this;\\n                }\\n                return out;\\n            }\\n            throw new Error((\\\"unknown channel \\\" + channel + \\\" in mode \\\" + mode));\\n        } else {\\n            return src;\\n        }\\n    };\\n\\n    var rgb$1 = function (col1, col2, f) {\\n        var xyz0 = col1._rgb;\\n        var xyz1 = col2._rgb;\\n        return new Color_1(\\n            xyz0[0] + f * (xyz1[0]-xyz0[0]),\\n            xyz0[1] + f * (xyz1[1]-xyz0[1]),\\n            xyz0[2] + f * (xyz1[2]-xyz0[2]),\\n            'rgb'\\n        )\\n    };\\n\\n    // register interpolator\\n    interpolator.rgb = rgb$1;\\n\\n    var sqrt$2 = Math.sqrt;\\n    var pow$3 = Math.pow;\\n\\n    var lrgb = function (col1, col2, f) {\\n        var ref = col1._rgb;\\n        var x1 = ref[0];\\n        var y1 = ref[1];\\n        var z1 = ref[2];\\n        var ref$1 = col2._rgb;\\n        var x2 = ref$1[0];\\n        var y2 = ref$1[1];\\n        var z2 = ref$1[2];\\n        return new Color_1(\\n            sqrt$2(pow$3(x1,2) * (1-f) + pow$3(x2,2) * f),\\n            sqrt$2(pow$3(y1,2) * (1-f) + pow$3(y2,2) * f),\\n            sqrt$2(pow$3(z1,2) * (1-f) + pow$3(z2,2) * f),\\n            'rgb'\\n        )\\n    };\\n\\n    // register interpolator\\n    interpolator.lrgb = lrgb;\\n\\n    var lab$1 = function (col1, col2, f) {\\n        var xyz0 = col1.lab();\\n        var xyz1 = col2.lab();\\n        return new Color_1(\\n            xyz0[0] + f * (xyz1[0]-xyz0[0]),\\n            xyz0[1] + f * (xyz1[1]-xyz0[1]),\\n            xyz0[2] + f * (xyz1[2]-xyz0[2]),\\n            'lab'\\n        )\\n    };\\n\\n    // register interpolator\\n    interpolator.lab = lab$1;\\n\\n    var _hsx = function (col1, col2, f, m) {\\n        var assign, assign$1;\\n\\n        var xyz0, xyz1;\\n        if (m === 'hsl') {\\n            xyz0 = col1.hsl();\\n            xyz1 = col2.hsl();\\n        } else if (m === 'hsv') {\\n            xyz0 = col1.hsv();\\n            xyz1 = col2.hsv();\\n        } else if (m === 'hcg') {\\n            xyz0 = col1.hcg();\\n            xyz1 = col2.hcg();\\n        } else if (m === 'hsi') {\\n            xyz0 = col1.hsi();\\n            xyz1 = col2.hsi();\\n        } else if (m === 'lch' || m === 'hcl') {\\n            m = 'hcl';\\n            xyz0 = col1.hcl();\\n            xyz1 = col2.hcl();\\n        }\\n\\n        var hue0, hue1, sat0, sat1, lbv0, lbv1;\\n        if (m.substr(0, 1) === 'h') {\\n            (assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2]);\\n            (assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2]);\\n        }\\n\\n        var sat, hue, lbv, dh;\\n\\n        if (!isNaN(hue0) && !isNaN(hue1)) {\\n            // both colors have hue\\n            if (hue1 > hue0 && hue1 - hue0 > 180) {\\n                dh = hue1-(hue0+360);\\n            } else if (hue1 < hue0 && hue0 - hue1 > 180) {\\n                dh = hue1+360-hue0;\\n            } else{\\n                dh = hue1 - hue0;\\n            }\\n            hue = hue0 + f * dh;\\n        } else if (!isNaN(hue0)) {\\n            hue = hue0;\\n            if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') { sat = sat0; }\\n        } else if (!isNaN(hue1)) {\\n            hue = hue1;\\n            if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') { sat = sat1; }\\n        } else {\\n            hue = Number.NaN;\\n        }\\n\\n        if (sat === undefined) { sat = sat0 + f * (sat1 - sat0); }\\n        lbv = lbv0 + f * (lbv1-lbv0);\\n        return new Color_1([hue, sat, lbv], m);\\n    };\\n\\n    var lch$1 = function (col1, col2, f) {\\n    \\treturn _hsx(col1, col2, f, 'lch');\\n    };\\n\\n    // register interpolator\\n    interpolator.lch = lch$1;\\n    interpolator.hcl = lch$1;\\n\\n    var num$1 = function (col1, col2, f) {\\n        var c1 = col1.num();\\n        var c2 = col2.num();\\n        return new Color_1(c1 + f * (c2-c1), 'num')\\n    };\\n\\n    // register interpolator\\n    interpolator.num = num$1;\\n\\n    var hcg$1 = function (col1, col2, f) {\\n    \\treturn _hsx(col1, col2, f, 'hcg');\\n    };\\n\\n    // register interpolator\\n    interpolator.hcg = hcg$1;\\n\\n    var hsi$1 = function (col1, col2, f) {\\n    \\treturn _hsx(col1, col2, f, 'hsi');\\n    };\\n\\n    // register interpolator\\n    interpolator.hsi = hsi$1;\\n\\n    var hsl$1 = function (col1, col2, f) {\\n    \\treturn _hsx(col1, col2, f, 'hsl');\\n    };\\n\\n    // register interpolator\\n    interpolator.hsl = hsl$1;\\n\\n    var hsv$1 = function (col1, col2, f) {\\n    \\treturn _hsx(col1, col2, f, 'hsv');\\n    };\\n\\n    // register interpolator\\n    interpolator.hsv = hsv$1;\\n\\n    var clip_rgb$2 = utils.clip_rgb;\\n    var pow$4 = Math.pow;\\n    var sqrt$3 = Math.sqrt;\\n    var PI$1 = Math.PI;\\n    var cos$2 = Math.cos;\\n    var sin$1 = Math.sin;\\n    var atan2$1 = Math.atan2;\\n\\n    var average = function (colors, mode, weights) {\\n        if ( mode === void 0 ) mode='lrgb';\\n        if ( weights === void 0 ) weights=null;\\n\\n        var l = colors.length;\\n        if (!weights) { weights = Array.from(new Array(l)).map(function () { return 1; }); }\\n        // normalize weights\\n        var k = l / weights.reduce(function(a, b) { return a + b; });\\n        weights.forEach(function (w,i) { weights[i] *= k; });\\n        // convert colors to Color objects\\n        colors = colors.map(function (c) { return new Color_1(c); });\\n        if (mode === 'lrgb') {\\n            return _average_lrgb(colors, weights)\\n        }\\n        var first = colors.shift();\\n        var xyz = first.get(mode);\\n        var cnt = [];\\n        var dx = 0;\\n        var dy = 0;\\n        // initial color\\n        for (var i=0; i<xyz.length; i++) {\\n            xyz[i] = (xyz[i] || 0) * weights[0];\\n            cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\\n            if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\\n                var A = xyz[i] / 180 * PI$1;\\n                dx += cos$2(A) * weights[0];\\n                dy += sin$1(A) * weights[0];\\n            }\\n        }\\n\\n        var alpha = first.alpha() * weights[0];\\n        colors.forEach(function (c,ci) {\\n            var xyz2 = c.get(mode);\\n            alpha += c.alpha() * weights[ci+1];\\n            for (var i=0; i<xyz.length; i++) {\\n                if (!isNaN(xyz2[i])) {\\n                    cnt[i] += weights[ci+1];\\n                    if (mode.charAt(i) === 'h') {\\n                        var A = xyz2[i] / 180 * PI$1;\\n                        dx += cos$2(A) * weights[ci+1];\\n                        dy += sin$1(A) * weights[ci+1];\\n                    } else {\\n                        xyz[i] += xyz2[i] * weights[ci+1];\\n                    }\\n                }\\n            }\\n        });\\n\\n        for (var i$1=0; i$1<xyz.length; i$1++) {\\n            if (mode.charAt(i$1) === 'h') {\\n                var A$1 = atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1 * 180;\\n                while (A$1 < 0) { A$1 += 360; }\\n                while (A$1 >= 360) { A$1 -= 360; }\\n                xyz[i$1] = A$1;\\n            } else {\\n                xyz[i$1] = xyz[i$1]/cnt[i$1];\\n            }\\n        }\\n        alpha /= l;\\n        return (new Color_1(xyz, mode)).alpha(alpha > 0.99999 ? 1 : alpha, true);\\n    };\\n\\n\\n    var _average_lrgb = function (colors, weights) {\\n        var l = colors.length;\\n        var xyz = [0,0,0,0];\\n        for (var i=0; i < colors.length; i++) {\\n            var col = colors[i];\\n            var f = weights[i] / l;\\n            var rgb = col._rgb;\\n            xyz[0] += pow$4(rgb[0],2) * f;\\n            xyz[1] += pow$4(rgb[1],2) * f;\\n            xyz[2] += pow$4(rgb[2],2) * f;\\n            xyz[3] += rgb[3] * f;\\n        }\\n        xyz[0] = sqrt$3(xyz[0]);\\n        xyz[1] = sqrt$3(xyz[1]);\\n        xyz[2] = sqrt$3(xyz[2]);\\n        if (xyz[3] > 0.9999999) { xyz[3] = 1; }\\n        return new Color_1(clip_rgb$2(xyz));\\n    };\\n\\n    // minimal multi-purpose interface\\n\\n    // @requires utils color analyze\\n\\n\\n    var type$j = utils.type;\\n\\n    var pow$5 = Math.pow;\\n\\n    var scale = function(colors) {\\n\\n        // constructor\\n        var _mode = 'rgb';\\n        var _nacol = chroma_1('#ccc');\\n        var _spread = 0;\\n        // const _fixed = false;\\n        var _domain = [0, 1];\\n        var _pos = [];\\n        var _padding = [0,0];\\n        var _classes = false;\\n        var _colors = [];\\n        var _out = false;\\n        var _min = 0;\\n        var _max = 1;\\n        var _correctLightness = false;\\n        var _colorCache = {};\\n        var _useCache = true;\\n        var _gamma = 1;\\n\\n        // private methods\\n\\n        var setColors = function(colors) {\\n            colors = colors || ['#fff', '#000'];\\n            if (colors && type$j(colors) === 'string' && chroma_1.brewer &&\\n                chroma_1.brewer[colors.toLowerCase()]) {\\n                colors = chroma_1.brewer[colors.toLowerCase()];\\n            }\\n            if (type$j(colors) === 'array') {\\n                // handle single color\\n                if (colors.length === 1) {\\n                    colors = [colors[0], colors[0]];\\n                }\\n                // make a copy of the colors\\n                colors = colors.slice(0);\\n                // convert to chroma classes\\n                for (var c=0; c<colors.length; c++) {\\n                    colors[c] = chroma_1(colors[c]);\\n                }\\n                // auto-fill color position\\n                _pos.length = 0;\\n                for (var c$1=0; c$1<colors.length; c$1++) {\\n                    _pos.push(c$1/(colors.length-1));\\n                }\\n            }\\n            resetCache();\\n            return _colors = colors;\\n        };\\n\\n        var getClass = function(value) {\\n            if (_classes != null) {\\n                var n = _classes.length-1;\\n                var i = 0;\\n                while (i < n && value >= _classes[i]) {\\n                    i++;\\n                }\\n                return i-1;\\n            }\\n            return 0;\\n        };\\n\\n        var tMapLightness = function (t) { return t; };\\n        var tMapDomain = function (t) { return t; };\\n\\n        // const classifyValue = function(value) {\\n        //     let val = value;\\n        //     if (_classes.length > 2) {\\n        //         const n = _classes.length-1;\\n        //         const i = getClass(value);\\n        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\\n        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\\n        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\\n        //     }\\n        //     return val;\\n        // };\\n\\n        var getColor = function(val, bypassMap) {\\n            var col, t;\\n            if (bypassMap == null) { bypassMap = false; }\\n            if (isNaN(val) || (val === null)) { return _nacol; }\\n            if (!bypassMap) {\\n                if (_classes && (_classes.length > 2)) {\\n                    // find the class\\n                    var c = getClass(val);\\n                    t = c / (_classes.length-2);\\n                } else if (_max !== _min) {\\n                    // just interpolate between min/max\\n                    t = (val - _min) / (_max - _min);\\n                } else {\\n                    t = 1;\\n                }\\n            } else {\\n                t = val;\\n            }\\n\\n            // domain map\\n            t = tMapDomain(t);\\n\\n            if (!bypassMap) {\\n                t = tMapLightness(t);  // lightness correction\\n            }\\n\\n            if (_gamma !== 1) { t = pow$5(t, _gamma); }\\n\\n            t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\\n\\n            t = Math.min(1, Math.max(0, t));\\n\\n            var k = Math.floor(t * 10000);\\n\\n            if (_useCache && _colorCache[k]) {\\n                col = _colorCache[k];\\n            } else {\\n                if (type$j(_colors) === 'array') {\\n                    //for i in [0.._pos.length-1]\\n                    for (var i=0; i<_pos.length; i++) {\\n                        var p = _pos[i];\\n                        if (t <= p) {\\n                            col = _colors[i];\\n                            break;\\n                        }\\n                        if ((t >= p) && (i === (_pos.length-1))) {\\n                            col = _colors[i];\\n                            break;\\n                        }\\n                        if (t > p && t < _pos[i+1]) {\\n                            t = (t-p)/(_pos[i+1]-p);\\n                            col = chroma_1.interpolate(_colors[i], _colors[i+1], t, _mode);\\n                            break;\\n                        }\\n                    }\\n                } else if (type$j(_colors) === 'function') {\\n                    col = _colors(t);\\n                }\\n                if (_useCache) { _colorCache[k] = col; }\\n            }\\n            return col;\\n        };\\n\\n        var resetCache = function () { return _colorCache = {}; };\\n\\n        setColors(colors);\\n\\n        // public interface\\n\\n        var f = function(v) {\\n            var c = chroma_1(getColor(v));\\n            if (_out && c[_out]) { return c[_out](); } else { return c; }\\n        };\\n\\n        f.classes = function(classes) {\\n            if (classes != null) {\\n                if (type$j(classes) === 'array') {\\n                    _classes = classes;\\n                    _domain = [classes[0], classes[classes.length-1]];\\n                } else {\\n                    var d = chroma_1.analyze(_domain);\\n                    if (classes === 0) {\\n                        _classes = [d.min, d.max];\\n                    } else {\\n                        _classes = chroma_1.limits(d, 'e', classes);\\n                    }\\n                }\\n                return f;\\n            }\\n            return _classes;\\n        };\\n\\n\\n        f.domain = function(domain) {\\n            if (!arguments.length) {\\n                return _domain;\\n            }\\n            _min = domain[0];\\n            _max = domain[domain.length-1];\\n            _pos = [];\\n            var k = _colors.length;\\n            if ((domain.length === k) && (_min !== _max)) {\\n                // update positions\\n                for (var i = 0, list = Array.from(domain); i < list.length; i += 1) {\\n                    var d = list[i];\\n\\n                  _pos.push((d-_min) / (_max-_min));\\n                }\\n            } else {\\n                for (var c=0; c<k; c++) {\\n                    _pos.push(c/(k-1));\\n                }\\n                if (domain.length > 2) {\\n                    // set domain map\\n                    var tOut = domain.map(function (d,i) { return i/(domain.length-1); });\\n                    var tBreaks = domain.map(function (d) { return (d - _min) / (_max - _min); });\\n                    if (!tBreaks.every(function (val, i) { return tOut[i] === val; })) {\\n                        tMapDomain = function (t) {\\n                            if (t <= 0 || t >= 1) { return t; }\\n                            var i = 0;\\n                            while (t >= tBreaks[i+1]) { i++; }\\n                            var f = (t - tBreaks[i]) / (tBreaks[i+1] - tBreaks[i]);\\n                            var out = tOut[i] + f * (tOut[i+1] - tOut[i]);\\n                            return out;\\n                        };\\n                    }\\n\\n                }\\n            }\\n            _domain = [_min, _max];\\n            return f;\\n        };\\n\\n        f.mode = function(_m) {\\n            if (!arguments.length) {\\n                return _mode;\\n            }\\n            _mode = _m;\\n            resetCache();\\n            return f;\\n        };\\n\\n        f.range = function(colors, _pos) {\\n            setColors(colors, _pos);\\n            return f;\\n        };\\n\\n        f.out = function(_o) {\\n            _out = _o;\\n            return f;\\n        };\\n\\n        f.spread = function(val) {\\n            if (!arguments.length) {\\n                return _spread;\\n            }\\n            _spread = val;\\n            return f;\\n        };\\n\\n        f.correctLightness = function(v) {\\n            if (v == null) { v = true; }\\n            _correctLightness = v;\\n            resetCache();\\n            if (_correctLightness) {\\n                tMapLightness = function(t) {\\n                    var L0 = getColor(0, true).lab()[0];\\n                    var L1 = getColor(1, true).lab()[0];\\n                    var pol = L0 > L1;\\n                    var L_actual = getColor(t, true).lab()[0];\\n                    var L_ideal = L0 + ((L1 - L0) * t);\\n                    var L_diff = L_actual - L_ideal;\\n                    var t0 = 0;\\n                    var t1 = 1;\\n                    var max_iter = 20;\\n                    while ((Math.abs(L_diff) > 1e-2) && (max_iter-- > 0)) {\\n                        (function() {\\n                            if (pol) { L_diff *= -1; }\\n                            if (L_diff < 0) {\\n                                t0 = t;\\n                                t += (t1 - t) * 0.5;\\n                            } else {\\n                                t1 = t;\\n                                t += (t0 - t) * 0.5;\\n                            }\\n                            L_actual = getColor(t, true).lab()[0];\\n                            return L_diff = L_actual - L_ideal;\\n                        })();\\n                    }\\n                    return t;\\n                };\\n            } else {\\n                tMapLightness = function (t) { return t; };\\n            }\\n            return f;\\n        };\\n\\n        f.padding = function(p) {\\n            if (p != null) {\\n                if (type$j(p) === 'number') {\\n                    p = [p,p];\\n                }\\n                _padding = p;\\n                return f;\\n            } else {\\n                return _padding;\\n            }\\n        };\\n\\n        f.colors = function(numColors, out) {\\n            // If no arguments are given, return the original colors that were provided\\n            if (arguments.length < 2) { out = 'hex'; }\\n            var result = [];\\n\\n            if (arguments.length === 0) {\\n                result = _colors.slice(0);\\n\\n            } else if (numColors === 1) {\\n                result = [f(0.5)];\\n\\n            } else if (numColors > 1) {\\n                var dm = _domain[0];\\n                var dd = _domain[1] - dm;\\n                result = __range__(0, numColors, false).map(function (i) { return f( dm + ((i/(numColors-1)) * dd) ); });\\n\\n            } else { // returns all colors based on the defined classes\\n                colors = [];\\n                var samples = [];\\n                if (_classes && (_classes.length > 2)) {\\n                    for (var i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\\n                        samples.push((_classes[i-1]+_classes[i])*0.5);\\n                    }\\n                } else {\\n                    samples = _domain;\\n                }\\n                result = samples.map(function (v) { return f(v); });\\n            }\\n\\n            if (chroma_1[out]) {\\n                result = result.map(function (c) { return c[out](); });\\n            }\\n            return result;\\n        };\\n\\n        f.cache = function(c) {\\n            if (c != null) {\\n                _useCache = c;\\n                return f;\\n            } else {\\n                return _useCache;\\n            }\\n        };\\n\\n        f.gamma = function(g) {\\n            if (g != null) {\\n                _gamma = g;\\n                return f;\\n            } else {\\n                return _gamma;\\n            }\\n        };\\n\\n        f.nodata = function(d) {\\n            if (d != null) {\\n                _nacol = chroma_1(d);\\n                return f;\\n            } else {\\n                return _nacol;\\n            }\\n        };\\n\\n        return f;\\n    };\\n\\n    function __range__(left, right, inclusive) {\\n      var range = [];\\n      var ascending = left < right;\\n      var end = !inclusive ? right : ascending ? right + 1 : right - 1;\\n      for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\\n        range.push(i);\\n      }\\n      return range;\\n    }\\n\\n    //\\n    // interpolates between a set of colors uzing a bezier spline\\n    //\\n\\n    // @requires utils lab\\n\\n\\n\\n\\n    var bezier = function(colors) {\\n        var assign, assign$1, assign$2;\\n\\n        var I, lab0, lab1, lab2;\\n        colors = colors.map(function (c) { return new Color_1(c); });\\n        if (colors.length === 2) {\\n            // linear interpolation\\n            (assign = colors.map(function (c) { return c.lab(); }), lab0 = assign[0], lab1 = assign[1]);\\n            I = function(t) {\\n                var lab = ([0, 1, 2].map(function (i) { return lab0[i] + (t * (lab1[i] - lab0[i])); }));\\n                return new Color_1(lab, 'lab');\\n            };\\n        } else if (colors.length === 3) {\\n            // quadratic bezier interpolation\\n            (assign$1 = colors.map(function (c) { return c.lab(); }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2]);\\n            I = function(t) {\\n                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t) * lab0[i]) + (2 * (1-t) * t * lab1[i]) + (t * t * lab2[i]); }));\\n                return new Color_1(lab, 'lab');\\n            };\\n        } else if (colors.length === 4) {\\n            // cubic bezier interpolation\\n            var lab3;\\n            (assign$2 = colors.map(function (c) { return c.lab(); }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3]);\\n            I = function(t) {\\n                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t)*(1-t) * lab0[i]) + (3 * (1-t) * (1-t) * t * lab1[i]) + (3 * (1-t) * t * t * lab2[i]) + (t*t*t * lab3[i]); }));\\n                return new Color_1(lab, 'lab');\\n            };\\n        } else if (colors.length === 5) {\\n            var I0 = bezier(colors.slice(0, 3));\\n            var I1 = bezier(colors.slice(2, 5));\\n            I = function(t) {\\n                if (t < 0.5) {\\n                    return I0(t*2);\\n                } else {\\n                    return I1((t-0.5)*2);\\n                }\\n            };\\n        }\\n        return I;\\n    };\\n\\n    var bezier_1 = function (colors) {\\n        var f = bezier(colors);\\n        f.scale = function () { return scale(f); };\\n        return f;\\n    };\\n\\n    /*\\n     * interpolates between a set of colors uzing a bezier spline\\n     * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\\n     */\\n\\n\\n\\n\\n    var blend = function (bottom, top, mode) {\\n        if (!blend[mode]) {\\n            throw new Error('unknown blend mode ' + mode);\\n        }\\n        return blend[mode](bottom, top);\\n    };\\n\\n    var blend_f = function (f) { return function (bottom,top) {\\n            var c0 = chroma_1(top).rgb();\\n            var c1 = chroma_1(bottom).rgb();\\n            return chroma_1.rgb(f(c0, c1));\\n        }; };\\n\\n    var each = function (f) { return function (c0, c1) {\\n            var out = [];\\n            out[0] = f(c0[0], c1[0]);\\n            out[1] = f(c0[1], c1[1]);\\n            out[2] = f(c0[2], c1[2]);\\n            return out;\\n        }; };\\n\\n    var normal = function (a) { return a; };\\n    var multiply = function (a,b) { return a * b / 255; };\\n    var darken$1 = function (a,b) { return a > b ? b : a; };\\n    var lighten = function (a,b) { return a > b ? a : b; };\\n    var screen = function (a,b) { return 255 * (1 - (1-a/255) * (1-b/255)); };\\n    var overlay = function (a,b) { return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255 ) * ( 1 - b / 255 )); };\\n    var burn = function (a,b) { return 255 * (1 - (1 - b / 255) / (a/255)); };\\n    var dodge = function (a,b) {\\n        if (a === 255) { return 255; }\\n        a = 255 * (b / 255) / (1 - a / 255);\\n        return a > 255 ? 255 : a\\n    };\\n\\n    // # add = (a,b) ->\\n    // #     if (a + b > 255) then 255 else a + b\\n\\n    blend.normal = blend_f(each(normal));\\n    blend.multiply = blend_f(each(multiply));\\n    blend.screen = blend_f(each(screen));\\n    blend.overlay = blend_f(each(overlay));\\n    blend.darken = blend_f(each(darken$1));\\n    blend.lighten = blend_f(each(lighten));\\n    blend.dodge = blend_f(each(dodge));\\n    blend.burn = blend_f(each(burn));\\n    // blend.add = blend_f(each(add));\\n\\n    var blend_1 = blend;\\n\\n    // cubehelix interpolation\\n    // based on D.A. Green \\\"A colour scheme for the display of astronomical intensity images\\\"\\n    // http://astron-soc.in/bulletin/11June/289392011.pdf\\n\\n    var type$k = utils.type;\\n    var clip_rgb$3 = utils.clip_rgb;\\n    var TWOPI$2 = utils.TWOPI;\\n    var pow$6 = Math.pow;\\n    var sin$2 = Math.sin;\\n    var cos$3 = Math.cos;\\n\\n\\n    var cubehelix = function(start, rotations, hue, gamma, lightness) {\\n        if ( start === void 0 ) start=300;\\n        if ( rotations === void 0 ) rotations=-1.5;\\n        if ( hue === void 0 ) hue=1;\\n        if ( gamma === void 0 ) gamma=1;\\n        if ( lightness === void 0 ) lightness=[0,1];\\n\\n        var dh = 0, dl;\\n        if (type$k(lightness) === 'array') {\\n            dl = lightness[1] - lightness[0];\\n        } else {\\n            dl = 0;\\n            lightness = [lightness, lightness];\\n        }\\n\\n        var f = function(fract) {\\n            var a = TWOPI$2 * (((start+120)/360) + (rotations * fract));\\n            var l = pow$6(lightness[0] + (dl * fract), gamma);\\n            var h = dh !== 0 ? hue[0] + (fract * dh) : hue;\\n            var amp = (h * l * (1-l)) / 2;\\n            var cos_a = cos$3(a);\\n            var sin_a = sin$2(a);\\n            var r = l + (amp * ((-0.14861 * cos_a) + (1.78277* sin_a)));\\n            var g = l + (amp * ((-0.29227 * cos_a) - (0.90649* sin_a)));\\n            var b = l + (amp * (+1.97294 * cos_a));\\n            return chroma_1(clip_rgb$3([r*255,g*255,b*255,1]));\\n        };\\n\\n        f.start = function(s) {\\n            if ((s == null)) { return start; }\\n            start = s;\\n            return f;\\n        };\\n\\n        f.rotations = function(r) {\\n            if ((r == null)) { return rotations; }\\n            rotations = r;\\n            return f;\\n        };\\n\\n        f.gamma = function(g) {\\n            if ((g == null)) { return gamma; }\\n            gamma = g;\\n            return f;\\n        };\\n\\n        f.hue = function(h) {\\n            if ((h == null)) { return hue; }\\n            hue = h;\\n            if (type$k(hue) === 'array') {\\n                dh = hue[1] - hue[0];\\n                if (dh === 0) { hue = hue[1]; }\\n            } else {\\n                dh = 0;\\n            }\\n            return f;\\n        };\\n\\n        f.lightness = function(h) {\\n            if ((h == null)) { return lightness; }\\n            if (type$k(h) === 'array') {\\n                lightness = h;\\n                dl = h[1] - h[0];\\n            } else {\\n                lightness = [h,h];\\n                dl = 0;\\n            }\\n            return f;\\n        };\\n\\n        f.scale = function () { return chroma_1.scale(f); };\\n\\n        f.hue(hue);\\n\\n        return f;\\n    };\\n\\n    var digits = '0123456789abcdef';\\n\\n    var floor$2 = Math.floor;\\n    var random = Math.random;\\n\\n    var random_1 = function () {\\n        var code = '#';\\n        for (var i=0; i<6; i++) {\\n            code += digits.charAt(floor$2(random() * 16));\\n        }\\n        return new Color_1(code, 'hex');\\n    };\\n\\n    var log$1 = Math.log;\\n    var pow$7 = Math.pow;\\n    var floor$3 = Math.floor;\\n    var abs = Math.abs;\\n\\n\\n    var analyze = function (data, key) {\\n        if ( key === void 0 ) key=null;\\n\\n        var r = {\\n            min: Number.MAX_VALUE,\\n            max: Number.MAX_VALUE*-1,\\n            sum: 0,\\n            values: [],\\n            count: 0\\n        };\\n        if (type(data) === 'object') {\\n            data = Object.values(data);\\n        }\\n        data.forEach(function (val) {\\n            if (key && type(val) === 'object') { val = val[key]; }\\n            if (val !== undefined && val !== null && !isNaN(val)) {\\n                r.values.push(val);\\n                r.sum += val;\\n                if (val < r.min) { r.min = val; }\\n                if (val > r.max) { r.max = val; }\\n                r.count += 1;\\n            }\\n        });\\n\\n        r.domain = [r.min, r.max];\\n\\n        r.limits = function (mode, num) { return limits(r, mode, num); };\\n\\n        return r;\\n    };\\n\\n\\n    var limits = function (data, mode, num) {\\n        if ( mode === void 0 ) mode='equal';\\n        if ( num === void 0 ) num=7;\\n\\n        if (type(data) == 'array') {\\n            data = analyze(data);\\n        }\\n        var min = data.min;\\n        var max = data.max;\\n        var values = data.values.sort(function (a,b) { return a-b; });\\n\\n        if (num === 1) { return [min,max]; }\\n\\n        var limits = [];\\n\\n        if (mode.substr(0,1) === 'c') { // continuous\\n            limits.push(min);\\n            limits.push(max);\\n        }\\n\\n        if (mode.substr(0,1) === 'e') { // equal interval\\n            limits.push(min);\\n            for (var i=1; i<num; i++) {\\n                limits.push(min+((i/num)*(max-min)));\\n            }\\n            limits.push(max);\\n        }\\n\\n        else if (mode.substr(0,1) === 'l') { // log scale\\n            if (min <= 0) {\\n                throw new Error('Logarithmic scales are only possible for values > 0');\\n            }\\n            var min_log = Math.LOG10E * log$1(min);\\n            var max_log = Math.LOG10E * log$1(max);\\n            limits.push(min);\\n            for (var i$1=1; i$1<num; i$1++) {\\n                limits.push(pow$7(10, min_log + ((i$1/num) * (max_log - min_log))));\\n            }\\n            limits.push(max);\\n        }\\n\\n        else if (mode.substr(0,1) === 'q') { // quantile scale\\n            limits.push(min);\\n            for (var i$2=1; i$2<num; i$2++) {\\n                var p = ((values.length-1) * i$2)/num;\\n                var pb = floor$3(p);\\n                if (pb === p) {\\n                    limits.push(values[pb]);\\n                } else { // p > pb\\n                    var pr = p - pb;\\n                    limits.push((values[pb]*(1-pr)) + (values[pb+1]*pr));\\n                }\\n            }\\n            limits.push(max);\\n\\n        }\\n\\n        else if (mode.substr(0,1) === 'k') { // k-means clustering\\n            /*\\n            implementation based on\\n            http://code.google.com/p/figue/source/browse/trunk/figue.js#336\\n            simplified for 1-d input values\\n            */\\n            var cluster;\\n            var n = values.length;\\n            var assignments = new Array(n);\\n            var clusterSizes = new Array(num);\\n            var repeat = true;\\n            var nb_iters = 0;\\n            var centroids = null;\\n\\n            // get seed values\\n            centroids = [];\\n            centroids.push(min);\\n            for (var i$3=1; i$3<num; i$3++) {\\n                centroids.push(min + ((i$3/num) * (max-min)));\\n            }\\n            centroids.push(max);\\n\\n            while (repeat) {\\n                // assignment step\\n                for (var j=0; j<num; j++) {\\n                    clusterSizes[j] = 0;\\n                }\\n                for (var i$4=0; i$4<n; i$4++) {\\n                    var value = values[i$4];\\n                    var mindist = Number.MAX_VALUE;\\n                    var best = (void 0);\\n                    for (var j$1=0; j$1<num; j$1++) {\\n                        var dist = abs(centroids[j$1]-value);\\n                        if (dist < mindist) {\\n                            mindist = dist;\\n                            best = j$1;\\n                        }\\n                        clusterSizes[best]++;\\n                        assignments[i$4] = best;\\n                    }\\n                }\\n\\n                // update centroids step\\n                var newCentroids = new Array(num);\\n                for (var j$2=0; j$2<num; j$2++) {\\n                    newCentroids[j$2] = null;\\n                }\\n                for (var i$5=0; i$5<n; i$5++) {\\n                    cluster = assignments[i$5];\\n                    if (newCentroids[cluster] === null) {\\n                        newCentroids[cluster] = values[i$5];\\n                    } else {\\n                        newCentroids[cluster] += values[i$5];\\n                    }\\n                }\\n                for (var j$3=0; j$3<num; j$3++) {\\n                    newCentroids[j$3] *= 1/clusterSizes[j$3];\\n                }\\n\\n                // check convergence\\n                repeat = false;\\n                for (var j$4=0; j$4<num; j$4++) {\\n                    if (newCentroids[j$4] !== centroids[j$4]) {\\n                        repeat = true;\\n                        break;\\n                    }\\n                }\\n\\n                centroids = newCentroids;\\n                nb_iters++;\\n\\n                if (nb_iters > 200) {\\n                    repeat = false;\\n                }\\n            }\\n\\n            // finished k-means clustering\\n            // the next part is borrowed from gabrielflor.it\\n            var kClusters = {};\\n            for (var j$5=0; j$5<num; j$5++) {\\n                kClusters[j$5] = [];\\n            }\\n            for (var i$6=0; i$6<n; i$6++) {\\n                cluster = assignments[i$6];\\n                kClusters[cluster].push(values[i$6]);\\n            }\\n            var tmpKMeansBreaks = [];\\n            for (var j$6=0; j$6<num; j$6++) {\\n                tmpKMeansBreaks.push(kClusters[j$6][0]);\\n                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length-1]);\\n            }\\n            tmpKMeansBreaks = tmpKMeansBreaks.sort(function (a,b){ return a-b; });\\n            limits.push(tmpKMeansBreaks[0]);\\n            for (var i$7=1; i$7 < tmpKMeansBreaks.length; i$7+= 2) {\\n                var v = tmpKMeansBreaks[i$7];\\n                if (!isNaN(v) && (limits.indexOf(v) === -1)) {\\n                    limits.push(v);\\n                }\\n            }\\n        }\\n        return limits;\\n    };\\n\\n    var analyze_1 = {analyze: analyze, limits: limits};\\n\\n    var contrast = function (a, b) {\\n        // WCAG contrast ratio\\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\\n        a = new Color_1(a);\\n        b = new Color_1(b);\\n        var l1 = a.luminance();\\n        var l2 = b.luminance();\\n        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\\n    };\\n\\n    var sqrt$4 = Math.sqrt;\\n    var atan2$2 = Math.atan2;\\n    var abs$1 = Math.abs;\\n    var cos$4 = Math.cos;\\n    var PI$2 = Math.PI;\\n\\n    var deltaE = function(a, b, L, C) {\\n        if ( L === void 0 ) L=1;\\n        if ( C === void 0 ) C=1;\\n\\n        // Delta E (CMC)\\n        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CMC.html\\n        a = new Color_1(a);\\n        b = new Color_1(b);\\n        var ref = Array.from(a.lab());\\n        var L1 = ref[0];\\n        var a1 = ref[1];\\n        var b1 = ref[2];\\n        var ref$1 = Array.from(b.lab());\\n        var L2 = ref$1[0];\\n        var a2 = ref$1[1];\\n        var b2 = ref$1[2];\\n        var c1 = sqrt$4((a1 * a1) + (b1 * b1));\\n        var c2 = sqrt$4((a2 * a2) + (b2 * b2));\\n        var sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + (0.01765 * L1));\\n        var sc = ((0.0638 * c1) / (1.0 + (0.0131 * c1))) + 0.638;\\n        var h1 = c1 < 0.000001 ? 0.0 : (atan2$2(b1, a1) * 180.0) / PI$2;\\n        while (h1 < 0) { h1 += 360; }\\n        while (h1 >= 360) { h1 -= 360; }\\n        var t = (h1 >= 164.0) && (h1 <= 345.0) ? (0.56 + abs$1(0.2 * cos$4((PI$2 * (h1 + 168.0)) / 180.0))) : (0.36 + abs$1(0.4 * cos$4((PI$2 * (h1 + 35.0)) / 180.0)));\\n        var c4 = c1 * c1 * c1 * c1;\\n        var f = sqrt$4(c4 / (c4 + 1900.0));\\n        var sh = sc * (((f * t) + 1.0) - f);\\n        var delL = L1 - L2;\\n        var delC = c1 - c2;\\n        var delA = a1 - a2;\\n        var delB = b1 - b2;\\n        var dH2 = ((delA * delA) + (delB * delB)) - (delC * delC);\\n        var v1 = delL / (L * sl);\\n        var v2 = delC / (C * sc);\\n        var v3 = sh;\\n        return sqrt$4((v1 * v1) + (v2 * v2) + (dH2 / (v3 * v3)));\\n    };\\n\\n    // simple Euclidean distance\\n    var distance = function(a, b, mode) {\\n        if ( mode === void 0 ) mode='lab';\\n\\n        // Delta E (CIE 1976)\\n        // see http://www.brucelindbloom.com/index.html?Equations.html\\n        a = new Color_1(a);\\n        b = new Color_1(b);\\n        var l1 = a.get(mode);\\n        var l2 = b.get(mode);\\n        var sum_sq = 0;\\n        for (var i in l1) {\\n            var d = (l1[i] || 0) - (l2[i] || 0);\\n            sum_sq += d*d;\\n        }\\n        return Math.sqrt(sum_sq);\\n    };\\n\\n    var valid = function () {\\n        var args = [], len = arguments.length;\\n        while ( len-- ) args[ len ] = arguments[ len ];\\n\\n        try {\\n            new (Function.prototype.bind.apply( Color_1, [ null ].concat( args) ));\\n            return true;\\n        } catch (e) {\\n            return false;\\n        }\\n    };\\n\\n    // some pre-defined color scales:\\n\\n\\n\\n\\n    var scales = {\\n    \\tcool: function cool() { return scale([chroma_1.hsl(180,1,.9), chroma_1.hsl(250,.7,.4)]) },\\n    \\thot: function hot() { return scale(['#000','#f00','#ff0','#fff'], [0,.25,.75,1]).mode('rgb') }\\n    };\\n\\n    /**\\n        ColorBrewer colors for chroma.js\\n\\n        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The\\n        Pennsylvania State University.\\n\\n        Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n        you may not use this file except in compliance with the License.\\n        You may obtain a copy of the License at\\n        http://www.apache.org/licenses/LICENSE-2.0\\n\\n        Unless required by applicable law or agreed to in writing, software distributed\\n        under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n        CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n        specific language governing permissions and limitations under the License.\\n    */\\n\\n    var colorbrewer = {\\n        // sequential\\n        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\\n        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\\n        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\\n        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\\n        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\\n        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\\n        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\\n        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\\n        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\\n        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\\n        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\\n        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\\n        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\\n        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\\n        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\\n        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\\n        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\\n        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\\n        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\\n\\n        // diverging\\n\\n        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\\n        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\\n        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\\n        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\\n        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\\n        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\\n        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\\n        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\\n        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\\n\\n        // qualitative\\n\\n        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\\n        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\\n        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\\n        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\\n        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\\n        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\\n        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\\n        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2'],\\n    };\\n\\n    // add lowercase aliases for case-insensitive matches\\n    for (var i$1 = 0, list$1 = Object.keys(colorbrewer); i$1 < list$1.length; i$1 += 1) {\\n        var key = list$1[i$1];\\n\\n        colorbrewer[key.toLowerCase()] = colorbrewer[key];\\n    }\\n\\n    var colorbrewer_1 = colorbrewer;\\n\\n    // feel free to comment out anything to rollup\\n    // a smaller chroma.js built\\n\\n    // io --\\x3e convert colors\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    // operators --\\x3e modify existing Colors\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    // interpolators\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    // generators -- > create new colors\\n    chroma_1.average = average;\\n    chroma_1.bezier = bezier_1;\\n    chroma_1.blend = blend_1;\\n    chroma_1.cubehelix = cubehelix;\\n    chroma_1.mix = chroma_1.interpolate = mix;\\n    chroma_1.random = random_1;\\n    chroma_1.scale = scale;\\n\\n    // other utility methods\\n    chroma_1.analyze = analyze_1.analyze;\\n    chroma_1.contrast = contrast;\\n    chroma_1.deltaE = deltaE;\\n    chroma_1.distance = distance;\\n    chroma_1.limits = analyze_1.limits;\\n    chroma_1.valid = valid;\\n\\n    // scale\\n    chroma_1.scales = scales;\\n\\n    // colors\\n    chroma_1.colors = w3cx11_1;\\n    chroma_1.brewer = colorbrewer_1;\\n\\n    var chroma_js = chroma_1;\\n\\n    return chroma_js;\\n\\n})));\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///792\\n\")}},__webpack_module_cache__={};function __nested_webpack_require_637997__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var B=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g].call(B.exports,B,B.exports,__nested_webpack_require_637997__),B.exports}__nested_webpack_require_637997__.n=g=>{var I=g&&g.__esModule?()=>g.default:()=>g;return __nested_webpack_require_637997__.d(I,{a:I}),I},__nested_webpack_require_637997__.d=(g,I)=>{for(var B in I)__nested_webpack_require_637997__.o(I,B)&&!__nested_webpack_require_637997__.o(g,B)&&Object.defineProperty(g,B,{enumerable:!0,get:I[B]})},__nested_webpack_require_637997__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__nested_webpack_require_637997__.r=g=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(g,\"__esModule\",{value:!0})};var __webpack_exports__=__nested_webpack_require_637997__(773);return __webpack_exports__})()}));\n\n//# sourceURL=webpack://svg-excalidraw/./node_modules/svg-to-excalidraw/dist/bundle.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;